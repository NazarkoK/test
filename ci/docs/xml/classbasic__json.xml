<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classbasic__json" kind="class" language="C++" prot="public">
    <compoundname>basic_json</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>template&lt; typename U, typename V, typename... Args &gt; class</type>
        <declname>ObjectType</declname>
        <defname>ObjectType</defname>
        <defval>std::map</defval>
      </param>
      <param>
        <type>template&lt; typename U, typename... Args &gt; class</type>
        <declname>ArrayType</declname>
        <defname>ArrayType</defname>
        <defval>std::vector</defval>
      </param>
      <param>
        <type>class StringType</type>
        <defval>std::string</defval>
      </param>
      <param>
        <type>class BooleanType</type>
        <defval>bool</defval>
      </param>
      <param>
        <type>class NumberIntegerType</type>
        <defval>std::int64_t</defval>
      </param>
      <param>
        <type>class NumberUnsignedType</type>
        <defval>std::uint64_t</defval>
      </param>
      <param>
        <type>class NumberFloatType</type>
        <defval>double</defval>
      </param>
      <param>
        <type>template&lt; typename U &gt; class</type>
        <declname>AllocatorType</declname>
        <defname>AllocatorType</defname>
        <defval>std::allocator</defval>
      </param>
      <param>
        <type>template&lt; typename T, typename SFINAE=void &gt; class</type>
        <declname>JSONSerializer</declname>
        <defname>JSONSerializer</defname>
        <defval><ref refid="structadl__serializer" kindref="compound">adl_serializer</ref></defval>
      </param>
      <param>
        <type>class BinaryType</type>
        <defval>std::vector&lt;std::uint8_t&gt;</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>element access</header>
      <description><para>Access to the JSON value. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1aa29b36146debb33f3f7293e92cc8643e" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; <ref refid="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" kindref="member">object_comparator_t</ref>, const typename object_t::key_type &amp;, KeyType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_comparable_with_object_key =  detail::is_comparable &lt;
        object_comparator_t, const typename object_t::key_type&amp;, KeyType &gt;</definition>
        <argsstring></argsstring>
        <name>is_comparable_with_object_key</name>
        <qualifiedname>basic_json::is_comparable_with_object_key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21377" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1af3878424116e745314658d0a921c6321" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>std::conditional&lt; <ref refid="namespacedetail_1ab709c72c18ebf08cf737d376bae1c08b" kindref="member">detail::is_c_string_uncvref</ref>&lt; ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, <ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref>, typename std::decay&lt; ValueType &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value_return_type =  std::conditional &lt;
        detail::is_c_string_uncvref&lt;ValueType&gt;::value,
        string_t, typename std::decay&lt;ValueType&gt;::type &gt;</definition>
        <argsstring></argsstring>
        <name>value_return_type</name>
        <qualifiedname>basic_json::value_return_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21381" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af728c561e10d2f8cfacf678b1da4f29e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1a76c6c4c14cb80b5010c659b8047e61d0" kindref="member">detail::has_erase_with_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase_internal</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>erase_internal</name>
        <qualifiedname>basic_json::erase_internal</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21736" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21736" bodyend="21745"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af728c561e10d2f8cfacf678b1da4f29e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; !<ref refid="namespacedetail_1a76c6c4c14cb80b5010c659b8047e61d0" kindref="member">detail::has_erase_with_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase_internal</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>erase_internal</name>
        <qualifiedname>basic_json::erase_internal</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21749" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21749" bodyend="21764"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a603779687f401ad11de45f8397f92296" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21104" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21104" bodyend="21123"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a98e6b7245d17021327eb3962d73ccc54" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21127" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21127" bodyend="21146"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aedf1894e1b70a4caebd95adec60e845a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21150" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21150" bodyend="21164"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afc69e86b65aa8b571ccad9d581ca5a2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21170" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21170" bodyend="21184"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afc32b953a4e343dc7f8ab3465743f399" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21188" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21188" bodyend="21202"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aee87279fb115f6d57967e6e8f5542faa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21208" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21208" bodyend="21222"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa3dfeae16fa9a8ec1390a27d6a4a58b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21226" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21226" bodyend="21268"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a61677841384622af7c3174f3f10df621" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21272" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21272" bodyend="21281"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a272177c4eb206c70f41e35146915b710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(typename object_t::key_type key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>typename object_t::key_type</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21285" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21285" bodyend="21303"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af57b78559cad28275bc515bb2a072605" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21307" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21307" bodyend="21318"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abb748eeb63f40f12f81f9e9c5d53d127" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(T *key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21323" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21323" bodyend="21326"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a19e43d3f7092719836ac3e8249044bb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(T *key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21329" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21329" bodyend="21332"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5a7e1bd642902ec90f118f00d48c024d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21338" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21338" bodyend="21356"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afb04aaee2ee66a6c822aaad827123314" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21362" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21362" bodyend="21373"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; !<ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" kindref="member">object_comparator_t</ref> &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21392" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21392" bodyend="21408"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1460a0f28bedca9050f2259ec6bf86e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class ReturnType</type>
            <defval>typename <ref refid="classbasic__json_1af3878424116e745314658d0a921c6321" kindref="member">value_return_type</ref>&lt;ValueType&gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></defval>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; !<ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" kindref="member">object_comparator_t</ref> &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ReturnType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, ValueType &amp;&amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21417" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21417" bodyend="21433"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a58469bce489ece80e50e7ed59fa09484" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" kindref="member">object_comparator_t</ref> &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!<ref refid="namespacedetail_1ad69b24f8cbed559288515173e466e90a" kindref="member">detail::is_json_pointer</ref>&lt; KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="classbasic__json_1aa29b36146debb33f3f7293e92cc8643e" kindref="member">is_comparable_with_object_key</ref>&lt; KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(KeyType &amp;&amp;key, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21443" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21443" bodyend="21459"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac7d24993dea7dcd5442465e43b0554cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type>class ReturnType</type>
            <defval>typename <ref refid="classbasic__json_1af3878424116e745314658d0a921c6321" kindref="member">value_return_type</ref>&lt;ValueType&gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></defval>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__transparent" kindref="compound">detail::is_transparent</ref>&lt; <ref refid="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" kindref="member">object_comparator_t</ref> &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!<ref refid="namespacedetail_1ad69b24f8cbed559288515173e466e90a" kindref="member">detail::is_json_pointer</ref>&lt; KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="classbasic__json_1aa29b36146debb33f3f7293e92cc8643e" kindref="member">is_comparable_with_object_key</ref>&lt; KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ReturnType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(KeyType &amp;&amp;key, ValueType &amp;&amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21470" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21470" bodyend="21486"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a8e07f0a0e66b05e7b77b95f623cbfac1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21493" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21493" bodyend="21510"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af435aab4d160572776d7e66c3809e4b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class ReturnType</type>
            <defval>typename <ref refid="classbasic__json_1af3878424116e745314658d0a921c6321" kindref="member">value_return_type</ref>&lt;ValueType&gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></defval>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ReturnType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, ValueType &amp;&amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21518" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21518" bodyend="21535"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6c7141baa06e635fe37736659a9f1631" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;ptr, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21542" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21542" bodyend="21545"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa5ea0e7032d5697076d3f2faf318af18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>class BasicJsonType</type>
          </param>
          <param>
            <type>class ReturnType</type>
            <defval>typename <ref refid="classbasic__json_1af3878424116e745314658d0a921c6321" kindref="member">value_return_type</ref>&lt;ValueType&gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></defval>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ReturnType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref>, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;ptr, ValueType &amp;&amp;default_value) const</argsstring>
        <name>value</name>
        <qualifiedname>basic_json::value</qualifiedname>
        <param>
          <type>const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21553" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21553" bodyend="21556"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aeb6f631d1a7f8f23772434f22a06108e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <qualifiedname>basic_json::front</qualifiedname>
        <briefdescription>
<para>access the first element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/front/">https://json.nlohmann.me/api/basic_json/front/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21560" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21560" bodyend="21563"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a85577855985468abef750d5265e23c2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <qualifiedname>basic_json::front</qualifiedname>
        <briefdescription>
<para>access the first element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/front/">https://json.nlohmann.me/api/basic_json/front/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21567" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21567" bodyend="21570"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1adafea743a0a74f86433b8b7cc5bb24bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <qualifiedname>basic_json::back</qualifiedname>
        <briefdescription>
<para>access the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/back/">https://json.nlohmann.me/api/basic_json/back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21574" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21574" bodyend="21579"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1bf48c36e00720e01f8f6bbd3df0bf5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <qualifiedname>basic_json::back</qualifiedname>
        <briefdescription>
<para>access the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/back/">https://json.nlohmann.me/api/basic_json/back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21583" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21583" bodyend="21588"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7a5ed019983b582705ef5ee43d15ca24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(IteratorType pos)</argsstring>
        <name>erase</name>
        <qualifiedname>basic_json::erase</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>remove element given an iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21595" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21595" bodyend="21658"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a151124c5b91ecb1278c7e191053ce9ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(IteratorType first, IteratorType last)</argsstring>
        <name>erase</name>
        <qualifiedname>basic_json::erase</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>remove elements given an iterator range </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21665" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21665" bodyend="21731"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a8d29d171d8941523a937bb6b5132b5a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>erase</name>
        <qualifiedname>basic_json::erase</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON object given a key </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21770" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21770" bodyend="21775"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3054e673f67fa325fbdcd0bf73d03c7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>erase</name>
        <qualifiedname>basic_json::erase</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON object given a key </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21781" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21781" bodyend="21784"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0e480e9d2391485c79747bb756628f61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(const size_type idx)</argsstring>
        <name>erase</name>
        <qualifiedname>basic_json::erase</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON array given an index </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21788" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21788" bodyend="21804"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>exceptions</header>
      <description><para>Classes to implement user-defined exceptions. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1ab671bd0e5eef59e58d362e6cd8937633" prot="public" static="no">
        <type><ref refid="classdetail_1_1exception" kindref="compound">detail::exception</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::exception =  detail::exception</definition>
        <argsstring></argsstring>
        <name>exception</name>
        <qualifiedname>basic_json::exception</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19362" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ab0da064d46469bb762afcecd1c361f1a" prot="public" static="no">
        <type><ref refid="classdetail_1_1parse__error" kindref="compound">detail::parse_error</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse_error =  detail::parse_error</definition>
        <argsstring></argsstring>
        <name>parse_error</name>
        <qualifiedname>basic_json::parse_error</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19363" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a9dbe40f1942d8e38ab2effc7988b05ea" prot="public" static="no">
        <type><ref refid="classdetail_1_1invalid__iterator" kindref="compound">detail::invalid_iterator</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::invalid_iterator =  detail::invalid_iterator</definition>
        <argsstring></argsstring>
        <name>invalid_iterator</name>
        <qualifiedname>basic_json::invalid_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19364" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a14db56e21a2c72186979c6f6f0469557" prot="public" static="no">
        <type><ref refid="classdetail_1_1type__error" kindref="compound">detail::type_error</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type_error =  detail::type_error</definition>
        <argsstring></argsstring>
        <name>type_error</name>
        <qualifiedname>basic_json::type_error</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19365" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a144d3cb5914a0a12c2f5d2b982a2214a" prot="public" static="no">
        <type><ref refid="classdetail_1_1out__of__range" kindref="compound">detail::out_of_range</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::out_of_range =  detail::out_of_range</definition>
        <argsstring></argsstring>
        <name>out_of_range</name>
        <qualifiedname>basic_json::out_of_range</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19366" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aab2ef54e2baf390523dd6a5bc4ccccef" prot="public" static="no">
        <type><ref refid="classdetail_1_1other__error" kindref="compound">detail::other_error</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::other_error =  detail::other_error</definition>
        <argsstring></argsstring>
        <name>other_error</name>
        <qualifiedname>basic_json::other_error</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19367" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19367" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>container types</header>
      <description><para>The canonic container types to use <ref refid="classbasic__json" kindref="compound">basic_json</ref> like any other STL container. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1ad9e6b75c7cc0db798b91e52edca5f4ca" prot="public" static="no">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value_type =  basic_json</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>basic_json::value_type</qualifiedname>
        <briefdescription>
<para>the type of elements in a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19382" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aa95f366d506aca733799e4c310927b5d" prot="public" static="no">
        <type><ref refid="classbasic__json_1ad9e6b75c7cc0db798b91e52edca5f4ca" kindref="member">value_type</ref> &amp;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>basic_json::reference</qualifiedname>
        <briefdescription>
<para>the type of an element reference </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19385" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" prot="public" static="no">
        <type>const <ref refid="classbasic__json_1ad9e6b75c7cc0db798b91e52edca5f4ca" kindref="member">value_type</ref> &amp;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_reference =  const value_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <qualifiedname>basic_json::const_reference</qualifiedname>
        <briefdescription>
<para>the type of an element const reference </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19387" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2fe32d636c1b78861884dde9716b22b6" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>basic_json::difference_type</qualifiedname>
        <briefdescription>
<para>a type to represent differences between iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19390" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>basic_json::size_type</qualifiedname>
        <briefdescription>
<para>a type to represent container sizes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19392" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a485873eed243b6ca7e30c96130a5ec2d" prot="public" static="no">
        <type>AllocatorType&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::allocator_type =  AllocatorType&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <qualifiedname>basic_json::allocator_type</qualifiedname>
        <briefdescription>
<para>the allocator type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19395" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ac02a5d1bf4e9cd1bdec90e97f4ea6f95" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classbasic__json_1a485873eed243b6ca7e30c96130a5ec2d" kindref="member">allocator_type</ref> &gt;::pointer</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::pointer =  typename std::allocator_traits&lt;allocator_type&gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>basic_json::pointer</qualifiedname>
        <briefdescription>
<para>the type of an element pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19398" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a28ac2566e6ab084c5c1e044d132aa4a3" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classbasic__json_1a485873eed243b6ca7e30c96130a5ec2d" kindref="member">allocator_type</ref> &gt;::const_pointer</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_pointer =  typename std::allocator_traits&lt;allocator_type&gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <qualifiedname>basic_json::const_pointer</qualifiedname>
        <briefdescription>
<para>the type of an element const pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19400" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" prot="public" static="no">
        <type><ref refid="classbasic__json_1aba0def4a0dbcc3ab08fc802f9acef967" kindref="member">iter_impl</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator =  iter_impl&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>basic_json::iterator</qualifiedname>
        <briefdescription>
<para>an iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19403" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" prot="public" static="no">
        <type><ref refid="classbasic__json_1aba0def4a0dbcc3ab08fc802f9acef967" kindref="member">iter_impl</ref>&lt; const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_iterator =  iter_impl&lt;const basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>basic_json::const_iterator</qualifiedname>
        <briefdescription>
<para>a const iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19405" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1ac639cd1b4238d158286e7e21b5829709" prot="public" static="no">
        <type><ref refid="classbasic__json_1a38142568f1a74d291c3442a70f6a2d2a" kindref="member">json_reverse_iterator</ref>&lt; typename <ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">basic_json::iterator</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::reverse_iterator =  json_reverse_iterator&lt;typename basic_json::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <qualifiedname>basic_json::reverse_iterator</qualifiedname>
        <briefdescription>
<para>a reverse iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19407" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2aa7d4c7719ab82aa8c77a83642c843f" prot="public" static="no">
        <type><ref refid="classbasic__json_1a38142568f1a74d291c3442a70f6a2d2a" kindref="member">json_reverse_iterator</ref>&lt; typename <ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">basic_json::const_iterator</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_reverse_iterator =  json_reverse_iterator&lt;typename basic_json::const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <qualifiedname>basic_json::const_reverse_iterator</qualifiedname>
        <briefdescription>
<para>a const reverse iterator for a <ref refid="classbasic__json" kindref="compound">basic_json</ref> container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19409" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19409" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>JSON value data types</header>
      <description><para>The data types to store a JSON value. These types are derived from the template arguments passed to class <ref refid="classbasic__json" kindref="compound">basic_json</ref>. </para>
</description>
      <memberdef kind="typedef" id="classbasic__json_1af2fea7b2039e4308b8e8c22a0dd5b570" prot="public" static="no">
        <type>std::less&lt; StringType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::default_object_comparator_t =  std::less&lt;StringType&gt;</definition>
        <argsstring></argsstring>
        <name>default_object_comparator_t</name>
        <qualifiedname>basic_json::default_object_comparator_t</qualifiedname>
        <briefdescription>
<para>default object key comparator type The actual object key comparator type (<ref refid="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" kindref="member">object_comparator_t</ref>) may be different. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/default_object_comparator_t/">https://json.nlohmann.me/api/basic_json/default_object_comparator_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19506" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" prot="public" static="no">
        <type>ObjectType&lt; StringType, <ref refid="classbasic__json" kindref="compound">basic_json</ref>, <ref refid="classbasic__json_1af2fea7b2039e4308b8e8c22a0dd5b570" kindref="member">default_object_comparator_t</ref>, AllocatorType&lt; std::pair&lt; const StringType, <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt; &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object_t =  ObjectType&lt;StringType,
          basic_json,
          default_object_comparator_t,
          AllocatorType&lt;std::pair&lt;const StringType,
          basic_json&gt;&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>object_t</name>
        <qualifiedname>basic_json::object_t</qualifiedname>
        <briefdescription>
<para>a type for an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/object_t/">https://json.nlohmann.me/api/basic_json/object_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19511" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" prot="public" static="no">
        <type>ArrayType&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, AllocatorType&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array_t =  ArrayType&lt;basic_json, AllocatorType&lt;basic_json&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>array_t</name>
        <qualifiedname>basic_json::array_t</qualifiedname>
        <briefdescription>
<para>a type for an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/array_t/">https://json.nlohmann.me/api/basic_json/array_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19519" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" prot="public" static="no">
        <type>StringType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::string_t =  StringType</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <qualifiedname>basic_json::string_t</qualifiedname>
        <briefdescription>
<para>a type for a string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/string_t/">https://json.nlohmann.me/api/basic_json/string_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19523" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" prot="public" static="no">
        <type>BooleanType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::boolean_t =  BooleanType</definition>
        <argsstring></argsstring>
        <name>boolean_t</name>
        <qualifiedname>basic_json::boolean_t</qualifiedname>
        <briefdescription>
<para>a type for a boolean </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/boolean_t/">https://json.nlohmann.me/api/basic_json/boolean_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19527" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a8b702448867b892700c768db4208a670" prot="public" static="no">
        <type>NumberIntegerType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_integer_t =  NumberIntegerType</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <qualifiedname>basic_json::number_integer_t</qualifiedname>
        <briefdescription>
<para>a type for a number (integer) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/number_integer_t/">https://json.nlohmann.me/api/basic_json/number_integer_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19531" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" prot="public" static="no">
        <type>NumberUnsignedType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_unsigned_t =  NumberUnsignedType</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <qualifiedname>basic_json::number_unsigned_t</qualifiedname>
        <briefdescription>
<para>a type for a number (unsigned) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/number_unsigned_t/">https://json.nlohmann.me/api/basic_json/number_unsigned_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19535" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" prot="public" static="no">
        <type>NumberFloatType</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_float_t =  NumberFloatType</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <qualifiedname>basic_json::number_float_t</qualifiedname>
        <briefdescription>
<para>a type for a number (floating-point) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/number_float_t/">https://json.nlohmann.me/api/basic_json/number_float_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19539" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aabedd827d4943302a4cf0413956341db" prot="public" static="no">
        <type>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary_t =  nlohmann::byte_container_with_subtype&lt;BinaryType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_t</name>
        <qualifiedname>basic_json::binary_t</qualifiedname>
        <briefdescription>
<para>a type for a packed binary type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary_t/">https://json.nlohmann.me/api/basic_json/binary_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19543" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" prot="public" static="no">
        <type><ref refid="namespacedetail_1a76d4e72f99ceeee429601e9b7cc295d6" kindref="member">detail::actual_object_comparator_t</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object_comparator_t =  detail::actual_object_comparator_t&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>object_comparator_t</name>
        <qualifiedname>basic_json::object_comparator_t</qualifiedname>
        <briefdescription>
<para>object key comparator type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/object_comparator_t/">https://json.nlohmann.me/api/basic_json/object_comparator_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19547" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19547" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>modifiers</header>
      <memberdef kind="friend" id="classbasic__json_1aee0ae36cbfb0336832ebc0374c3c7679" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" noexceptexpression="std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;::value" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(reference left, reference right)</argsstring>
        <name>swap</name>
        <qualifiedname>basic_json::swap</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22649" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22649" bodyend="22657"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac5145a99de8435876192b70378afe097" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <qualifiedname>basic_json::clear</qualifiedname>
        <briefdescription>
<para>clears the contents </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/clear/">https://json.nlohmann.me/api/basic_json/clear/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22197" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22197" bodyend="22254"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae9dd9991cbc1c10d35987680038f6359" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(basic_json &amp;&amp;val)</argsstring>
        <name>push_back</name>
        <qualifiedname>basic_json::push_back</qualifiedname>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22258" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22258" bodyend="22279"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a042aa42f535d1dbf2176d159fd3d96eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(basic_json &amp;&amp;val)</argsstring>
        <name>operator+=</name>
        <qualifiedname>basic_json::operator+=</qualifiedname>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22283" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22283" bodyend="22287"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a102e459f1d163cea963ed6fdda595cd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>push_back</name>
        <qualifiedname>basic_json::push_back</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22291" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22291" bodyend="22311"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afbbf3e602301f1b9fc81c445c8f3bd1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>operator+=</name>
        <qualifiedname>basic_json::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22315" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22315" bodyend="22319"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4efb88d640b634b77af5825321e6c4ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>push_back</name>
        <qualifiedname>basic_json::push_back</qualifiedname>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22323" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22323" bodyend="22342"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a024a7d334069a60f8cb95c3f858fc9e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>operator+=</name>
        <qualifiedname>basic_json::operator+=</qualifiedname>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22346" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22346" bodyend="22350"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1adabd8c4eea861419dc2629610a922e97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(initializer_list_t init)</argsstring>
        <name>push_back</name>
        <qualifiedname>basic_json::push_back</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22354" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22354" bodyend="22366"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae3350669b0628bf54a4771512a55f135" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(initializer_list_t init)</argsstring>
        <name>operator+=</name>
        <qualifiedname>basic_json::operator+=</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22370" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22370" bodyend="22374"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7ad89dd8715111483428ecf8534b9393" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <qualifiedname>basic_json::emplace_back</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/emplace_back/">https://json.nlohmann.me/api/basic_json/emplace_back/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22379" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22379" bodyend="22399"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3e70795da670f11ad7925407d0a7d83c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref>, bool &gt;</type>
        <definition>std::pair&lt; iterator, bool &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <qualifiedname>basic_json::emplace</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an object if key does not exist </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/emplace/">https://json.nlohmann.me/api/basic_json/emplace/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22404" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22404" bodyend="22430"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6940b08bda32ce195a9e4508b8aa1126" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert_iterator</definition>
        <argsstring>(const_iterator pos, Args &amp;&amp;... args)</argsstring>
        <name>insert_iterator</name>
        <qualifiedname>basic_json::insert_iterator</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper for insertion of an iterator <simplesect kind="note"><para>: This uses std::distance to support GCC 4.8, see <ulink url="https://github.com/nlohmann/json/pull/1257">https://github.com/nlohmann/json/pull/1257</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22436" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22436" bodyend="22451"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4467ec0c7679150140f9d2f85e95bf4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <qualifiedname>basic_json::insert</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22455" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22455" bodyend="22471"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5cd6ab85d95fa08d0fbce5f957834f28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, basic_json &amp;&amp;val)</argsstring>
        <name>insert</name>
        <qualifiedname>basic_json::insert</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22475" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22475" bodyend="22478"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1d7b302f4e6249b8b28dcfbebd934600" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, size_type cnt, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <qualifiedname>basic_json::insert</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts copies of element into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22482" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22482" bodyend="22498"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af30d7fc224999adeaa9e4dcd81db0f05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <qualifiedname>basic_json::insert</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts range of elements into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22502" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22502" bodyend="22529"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3b25eeb503c9f30322b966af0451da38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, initializer_list_t ilist)</argsstring>
        <name>insert</name>
        <qualifiedname>basic_json::insert</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" kindref="member">initializer_list_t</ref></type>
          <declname>ilist</declname>
        </param>
        <briefdescription>
<para>inserts elements from initializer list into array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22533" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22533" bodyend="22549"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a797b7b5589862535c88b9604c88d8d3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <qualifiedname>basic_json::insert</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts range of elements into object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22553" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22553" bodyend="22574"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa1c13ddcc1eb615dc56ebd7cb44791bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</definition>
        <argsstring>(const_reference j, bool merge_objects=false)</argsstring>
        <name>update</name>
        <qualifiedname>basic_json::update</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>merge_objects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>updates a JSON object from another object, overwriting existing keys </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/update/">https://json.nlohmann.me/api/basic_json/update/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22578" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22578" bodyend="22581"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2db7c9bf454f893d156a7396d527873b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</definition>
        <argsstring>(const_iterator first, const_iterator last, bool merge_objects=false)</argsstring>
        <name>update</name>
        <qualifiedname>basic_json::update</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>merge_objects</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>updates a JSON object from another object, overwriting existing keys </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/update/">https://json.nlohmann.me/api/basic_json/update/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22585" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22585" bodyend="22628"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a57541a1c736f6ea94fe4a92dd61b3c37" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" noexceptexpression="std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;::value" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(reference other)</argsstring>
        <name>swap</name>
        <qualifiedname>basic_json::swap</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22632" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22632" bodyend="22645"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af1bc171c2ec496dcc63c9035354d1138" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(array_t &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>basic_json::swap</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22661" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22661" bodyend="22673"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2061fc20992f76b6fe4a7d2456391b8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(object_t &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>basic_json::swap</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22677" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22677" bodyend="22689"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa914de665383b10bdd6265e6b63b8d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(string_t &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>basic_json::swap</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22693" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22693" bodyend="22705"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a23296c72c9f837e20cfdc28d8018dd57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(binary_t &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>basic_json::swap</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22709" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22709" bodyend="22721"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a636ae0a887a94436f43f26c94aa1f748" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(typename binary_t::container_type &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>basic_json::swap</qualifiedname>
        <param>
          <type>typename binary_t::container_type &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22725" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22725" bodyend="22737"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>lexicographical comparison operators</header>
      <memberdef kind="variable" id="classbasic__json_1a7e8bca0d3d745150dbaae538443bb626" prot="public" static="no" mutable="no">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad3__</definition>
        <argsstring></argsstring>
        <name>__pad3__</name>
        <qualifiedname>basic_json::__pad3__</qualifiedname>
        <bitfield> static bool compares_unordered(const_reference lhs</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22821" column="3" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1ac83f2e1cec130719f862008b9e16acee" prot="public" static="no" mutable="no">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref> <ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rhs</definition>
        <argsstring></argsstring>
        <name>rhs</name>
        <qualifiedname>basic_json::rhs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22827" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1abe6a2b3e624ac8772519963bcfb8fb56" prot="public" static="no" mutable="no">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref> <ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref> bool</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED const_reference bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::inverse</definition>
        <argsstring></argsstring>
        <name>inverse</name>
        <qualifiedname>basic_json::inverse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22827" column="27" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22827" bodyend="22966"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>value access</header>
      <description><para>Direct access to the stored value of a JSON value. </para>
</description>
      <memberdef kind="function" id="classbasic__json_1ad64c802d7f6170f049012baa4fa41abd" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), std::declval&lt; ValueType &amp; &gt;()))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__default__constructible" kindref="compound">detail::is_default_constructible</ref>&lt; ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 0 &gt;) const</argsstring>
        <name>get_impl</name>
        <qualifiedname>basic_json::get_impl</qualifiedname>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
<para>get a value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <ulink url="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</ulink> and <ulink url="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the <ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method.</para>
<para>The function is equivalent to executing <programlisting filename=".cpp"><codeline><highlight class="normal">ValueType<sp/>ret;</highlight></codeline>
<codeline><highlight class="normal">JSONSerializer&lt;ValueType&gt;::from_json(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>ret);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
</programlisting></para>
<para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="classbasic__json" kindref="compound">basic_json</ref>,</para>
</listitem><listitem><para><ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> has a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>void from_json(const <ref refid="classbasic__json" kindref="compound">basic_json</ref>&amp;, ValueType&amp;)</computeroutput>, and</para>
</listitem><listitem><para><ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> does not have a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>ValueType from_json(const <ref refid="classbasic__json" kindref="compound">basic_json</ref>&amp;)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method throws</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,get__ValueType_const}</para>
<para><simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20771" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20771" bodyend="20777"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2a8df16f639b0b140885bad6ac7ed980" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;()))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1has__non__default__from__json" kindref="compound">detail::has_non_default_from_json</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 1 &gt;) const</argsstring>
        <name>get_impl</name>
        <qualifiedname>basic_json::get_impl</qualifiedname>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
<para>get a value (explicit); special case </para>
        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <bold>not</bold> <ulink url="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</ulink> and <bold>not</bold> <ulink url="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the <ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method.</para>
<para>The function is equivalent to executing <programlisting filename=".cpp"><codeline><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JSONSerializer&lt;ValueType&gt;::from_json(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="classbasic__json" kindref="compound">basic_json</ref> and</para>
</listitem><listitem><para><ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> has a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>ValueType from_json(const <ref refid="classbasic__json" kindref="compound">basic_json</ref>&amp;)</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>If <ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> has both overloads of <computeroutput>from_json()</computeroutput>, this one is chosen.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method throws</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20813" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20813" bodyend="20817"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afa8783cbf830c698905fc1b020de2854" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>BasicJsonType</type>
        <definition>BasicJsonType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 2 &gt;) const</argsstring>
        <name>get_impl</name>
        <qualifiedname>basic_json::get_impl</qualifiedname>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
<para>get special-case overload </para>
        </briefdescription>
        <detaileddescription>
<para>This overloads converts the current <ref refid="classbasic__json" kindref="compound">basic_json</ref> in a different <ref refid="classbasic__json" kindref="compound">basic_json</ref> type</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>== <ref refid="classbasic__json" kindref="compound">basic_json</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of *this, converted into <emphasis>BasicJsonType</emphasis> </para>
</simplesect>
@complexity Depending on the implementation of the called <computeroutput>from_json()</computeroutput> method.</para>
<para><simplesect kind="since"><para>version 3.2.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20838" column="19" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20838" bodyend="20841"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2861b13d7657d5819a70f4f2c7922335" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; BasicJsonType, <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref> &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 3 &gt;) const</argsstring>
        <name>get_impl</name>
        <qualifiedname>basic_json::get_impl</qualifiedname>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
<para>get special-case overload </para>
        </briefdescription>
        <detaileddescription>
<para>This overloads avoids a lot of template boilerplate, it can be seen as the identity method</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>== <ref refid="classbasic__json" kindref="compound">basic_json</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of *this</para>
</simplesect>
@complexity Constant.</para>
<para><simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20861" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20861" bodyend="20864"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afa13fcef3893a0a658aacdea073a2174" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; std::is_pointer&lt; PointerType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; const <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref> &amp; &gt;().template <ref refid="classbasic__json_1a206a3748ff1fc676f64f753e203388dd" kindref="member">get_ptr</ref>&lt; PointerType &gt;())</type>
        <definition>decltype(std::declval&lt; const basic_json_t &amp; &gt;().template get_ptr&lt; PointerType &gt;()) basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 4 &gt;) const noexcept</argsstring>
        <name>get_impl</name>
        <qualifiedname>basic_json::get_impl</qualifiedname>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 4 &gt;</type>
        </param>
        <briefdescription>
<para>get a pointer value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>get a pointer value (explicit)   </para>
<para>Explicit pointer access to the internally stored JSON value. No copies are made.</para>
<para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref>, <ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref>, <ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref>, <ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref>, <ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref>, <ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref>, or <ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</simplesect>
@complexity Constant.</para>
<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para>
<para><simplesect kind="see"><para>see <ref refid="classbasic__json_1a206a3748ff1fc676f64f753e203388dd" kindref="member">get_ptr()</ref> for explicit pointer-member access</para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0    </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20874" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20874" bodyend="20879"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a206a3748ff1fc676f64f753e203388dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref> &amp; &gt;().<ref refid="classbasic__json_1a377655ce708e04fc796ca7307cbb0bae" kindref="member">get_impl_ptr</ref>(std::declval&lt; PointerType &gt;()))</type>
        <definition>decltype(std::declval&lt; basic_json_t &amp; &gt;().get_impl_ptr(std::declval&lt; PointerType &gt;())) basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ptr</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_ptr</name>
        <qualifiedname>basic_json::get_ptr</qualifiedname>
        <briefdescription>
<para>get a pointer value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ptr/">https://json.nlohmann.me/api/basic_json/get_ptr/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20710" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20710" bodyend="20714"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2055fcc0c999d3cb4c211f258695faff" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref> &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; const <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref> &amp; &gt;().<ref refid="classbasic__json_1a377655ce708e04fc796ca7307cbb0bae" kindref="member">get_impl_ptr</ref>(std::declval&lt; PointerType &gt;()))</type>
        <definition>decltype(std::declval&lt; const basic_json_t &amp; &gt;().get_impl_ptr(std::declval&lt; PointerType &gt;())) basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ptr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_ptr</name>
        <qualifiedname>basic_json::get_ptr</qualifiedname>
        <briefdescription>
<para>get a pointer value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ptr/">https://json.nlohmann.me/api/basic_json/get_ptr/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20721" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20721" bodyend="20725"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab11bff397526e8255d151066caeba48e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(std::declval&lt; const basic_json_t &amp; &gt;().template get_impl&lt; ValueType &gt;(detail::priority_tag&lt; 4 &gt; {}))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueTypeCV</type>
          </param>
          <param>
            <type>typename ValueType</type>
            <defval><ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt;ValueTypeCV&gt;</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; const <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref> &amp; &gt;().template <ref refid="classbasic__json_1a5c1dbb7957e2224af836fca54b593801" kindref="member">get_impl</ref>&lt; ValueType &gt;(<ref refid="structdetail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 4 &gt; {}))</type>
        <definition>decltype(std::declval&lt; const basic_json_t &amp; &gt;().template get_impl&lt; ValueType &gt;(detail::priority_tag&lt; 4 &gt; {})) basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <qualifiedname>basic_json::get</qualifiedname>
        <briefdescription>
<para>get a (pointer) value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Performs explicit type conversion between the JSON value and a compatible value if required.</para>
<para><itemizedlist>
<listitem><para>If the requested type is a pointer to the internally stored JSON value that pointer is returned. No copies are made.</para>
</listitem><listitem><para>If the requested type is the current <ref refid="classbasic__json" kindref="compound">basic_json</ref>, or a different <ref refid="classbasic__json" kindref="compound">basic_json</ref> convertible from the current <ref refid="classbasic__json" kindref="compound">basic_json</ref>.</para>
</listitem><listitem><para>Otherwise the value is converted by calling the <ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueTypeCV</parametername>
</parameternamelist>
<parameterdescription>
<para>the provided value type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>if necessary</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method throws if conversion is required</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20909" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20909" bodyend="20919"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a35fa19a3f6193409abe4bd9014712105" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref> &amp; &gt;().template <ref refid="classbasic__json_1a206a3748ff1fc676f64f753e203388dd" kindref="member">get_ptr</ref>&lt; PointerType &gt;())</type>
        <definition>decltype(std::declval&lt; basic_json_t &amp; &gt;().template get_ptr&lt; PointerType &gt;()) basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get</definition>
        <argsstring>() noexcept</argsstring>
        <name>get</name>
        <qualifiedname>basic_json::get</qualifiedname>
        <briefdescription>
<para>get a pointer value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Explicit pointer access to the internally stored JSON value. No copies are made.</para>
<para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref>, <ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref>, <ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref>, <ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref>, <ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref>, <ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref>, or <ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</simplesect>
@complexity Constant.</para>
<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para>
<para><simplesect kind="see"><para>see <ref refid="classbasic__json_1a206a3748ff1fc676f64f753e203388dd" kindref="member">get_ptr()</ref> for explicit pointer-member access</para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20950" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20950" bodyend="20954"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a251b2b7f275328615aed5a0f827e7710" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), v))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; !<ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType &amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to</definition>
        <argsstring>(ValueType &amp;v) const</argsstring>
        <name>get_to</name>
        <qualifiedname>basic_json::get_to</qualifiedname>
        <param>
          <type>ValueType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>get a value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_to/">https://json.nlohmann.me/api/basic_json/get_to/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20963" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20963" bodyend="20968"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9e0131c192963ed4d1148805120aa319" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType &amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to</definition>
        <argsstring>(ValueType &amp;v) const</argsstring>
        <name>get_to</name>
        <qualifiedname>basic_json::get_to</qualifiedname>
        <param>
          <type>ValueType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20976" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20976" bodyend="20980"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac6a78b37dee5a709f610375403597bba" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(JSONSerializer&lt; Array &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), v))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename Array</type>
            <defval>T (&amp;)[N]</defval>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, Array &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Array</type>
        <definition>Array basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to</definition>
        <argsstring>(T(&amp;v)[N]) const</argsstring>
        <name>get_to</name>
        <qualifiedname>basic_json::get_to</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20987" column="11" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20987" bodyend="20993"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7bfdaa5014da75e18dd07cc76e53b237" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref</definition>
        <argsstring>()</argsstring>
        <name>get_ref</name>
        <qualifiedname>basic_json::get_ref</qualifiedname>
        <briefdescription>
<para>get a reference value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ref/">https://json.nlohmann.me/api/basic_json/get_ref/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20999" column="19" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20999" bodyend="21003"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a42f1f9cf90ed5254e38e6b587fce237d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref> &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref</definition>
        <argsstring>() const</argsstring>
        <name>get_ref</name>
        <qualifiedname>basic_json::get_ref</qualifiedname>
        <briefdescription>
<para>get a reference value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_ref/">https://json.nlohmann.me/api/basic_json/get_ref/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21010" column="19" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21010" bodyend="21014"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a31ccb49215a3dcac15438fb94485e86f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structdetail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_pointer&lt; ValueType &gt; &gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, std::nullptr_t &gt; &gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, <ref refid="classdetail_1_1json__ref" kindref="compound">detail::json_ref</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt; &gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, typename string_t::value_type &gt; &gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt; &gt;, <ref refid="structdetail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt; &gt; &gt;, <ref refid="structdetail_1_1is__detected__lazy" kindref="compound">detail::is_detected_lazy</ref>&lt; <ref refid="namespacedetail_1afad0060784c2bfd69c62e4fd434ebcb8" kindref="member">detail::get_template_function</ref>, const <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref> &amp;, ValueType &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1aefed8cf27cadeea45f12c6f3db3ce774" kindref="member">JSON_EXPLICIT</ref></type>
        <definition>JSON_EXPLICIT basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator ValueType</definition>
        <argsstring>() const</argsstring>
        <name>operator ValueType</name>
        <qualifiedname>basic_json::operator ValueType</qualifiedname>
        <briefdescription>
<para>get a value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para>Implicit type conversion between the JSON value and a compatible value. The call is realized by calling <ref refid="classbasic__json_1ab11bff397526e8255d151066caeba48e" kindref="member">get() const</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>non-pointer type compatible to the JSON value, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. The character type of <ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to <computeroutput>std::string</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to type <emphasis>ValueType</emphasis> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ValueType</emphasis> is incompatible to the JSON value type (e.g., the JSON value is of type boolean, but a string is requested); see example below</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@complexity Linear in the size of the JSON value.</para>
<para>@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,operator__ValueType}</para>
<para><simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21061" column="55" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21061" bodyend="21065"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa4401911681258520903f3c374a9e994" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> &amp;</type>
        <definition>binary_t &amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_binary</definition>
        <argsstring>()</argsstring>
        <name>get_binary</name>
        <qualifiedname>basic_json::get_binary</qualifiedname>
        <briefdescription>
<para>get a binary value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_binary/">https://json.nlohmann.me/api/basic_json/get_binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21069" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21069" bodyend="21077"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a44b4244ff0e901156adfad7b027232de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> &amp;</type>
        <definition>const binary_t &amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_binary</definition>
        <argsstring>() const</argsstring>
        <name>get_binary</name>
        <qualifiedname>basic_json::get_binary</qualifiedname>
        <briefdescription>
<para>get a binary value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_binary/">https://json.nlohmann.me/api/basic_json/get_binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21081" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21081" bodyend="21089"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>constructors and destructors</header>
      <description><para>Constructors of class <ref refid="classbasic__json" kindref="compound">basic_json</ref>, copy/move constructor, copy assignment, static functions creating objects, and the destructor. </para>
</description>
      <memberdef kind="function" id="classbasic__json_1a8d25b7a4a6f6ee355193ee6b461ab3bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(const typename binary_t::container_type &amp;init)</argsstring>
        <name>binary</name>
        <qualifiedname>basic_json::binary</qualifiedname>
        <param>
          <type>const typename binary_t::container_type &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (without subtype) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20126" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20126" bodyend="20132"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9a92f5028b858b39e0c49c722ba09793" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(const typename binary_t::container_type &amp;init, typename binary_t::subtype_type subtype)</argsstring>
        <name>binary</name>
        <qualifiedname>basic_json::binary</qualifiedname>
        <param>
          <type>const typename binary_t::container_type &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>typename binary_t::subtype_type</type>
          <declname>subtype</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (with subtype) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20137" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20137" bodyend="20143"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0767ec4050ecfb4e4852db24cc939b2b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;init)</argsstring>
        <name>binary</name>
        <qualifiedname>basic_json::binary</qualifiedname>
        <param>
          <type>typename binary_t::container_type &amp;&amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20148" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20148" bodyend="20154"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6ad9ba515c5f51d9c5609583e3d0ada0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;init, typename binary_t::subtype_type subtype)</argsstring>
        <name>binary</name>
        <qualifiedname>basic_json::binary</qualifiedname>
        <param>
          <type>typename binary_t::container_type &amp;&amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>typename binary_t::subtype_type</type>
          <declname>subtype</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (with subtype) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20159" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20159" bodyend="20165"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a08a68350d457af1f6ea7f27b6e0a5baf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array</definition>
        <argsstring>(initializer_list_t init={})</argsstring>
        <name>array</name>
        <qualifiedname>basic_json::array</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>explicitly create an array from an initializer list </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/array/">https://json.nlohmann.me/api/basic_json/array/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20170" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20170" bodyend="20173"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a10aa3ec9e58f6852709913408519c01c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object</definition>
        <argsstring>(initializer_list_t init={})</argsstring>
        <name>object</name>
        <qualifiedname>basic_json::object</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>explicitly create an object from an initializer list </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/object/">https://json.nlohmann.me/api/basic_json/object/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20178" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20178" bodyend="20181"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aee75ecbdc67fc5faa1228c949c59ff27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const value_t v)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type>const <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>create an empty value with a given type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19983" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19983" bodyend="19987"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac6f1bad4745ddb574540f71cdbcd532f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(std::nullptr_t=nullptr) noexcept</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>create a null object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19991" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19991" bodyend="19995"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9b1f9ac7c7ebcff72d00869e974a6249" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(//NOLINT(bugprone-forwarding-reference-overload, bugprone-exception-escape) JSONSerializer&lt; U &gt;::to_json(std::declval&lt; basic_json_t &amp; &gt;(), std::forward&lt; CompatibleType &gt;(val)))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CompatibleType</type>
          </param>
          <param>
            <type>typename U</type>
            <defval><ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt;CompatibleType&gt;</defval>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; !<ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; U &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;<ref refid="structdetail_1_1is__compatible__type" kindref="compound">detail::is_compatible_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, U &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(CompatibleType &amp;&amp;val)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type>CompatibleType &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>create a JSON value from compatible types </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20003" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20003" bodyend="20010"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a94560a1edd72d60310c54c9b2d9f1ad2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref> &amp;&amp;!std::is_same&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const BasicJsonType &amp;val)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>create a JSON value from an existing one </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20017" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20017" bodyend="20066"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aec3d71dec8062753efb67860b7cca1a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(initializer_list_t init, bool type_deduction=true, value_t manual_type=value_t::array)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>type_deduction</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>manual_type</declname>
          <defval>value_t::array</defval>
        </param>
        <briefdescription>
<para>create a container (array or object) from an initializer list </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20070" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20070" bodyend="20121"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad382c9c9e03c410004150c9d6b9f0bd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(size_type cnt, const basic_json &amp;val)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>construct an array with count copies of given value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20185" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20185" bodyend="20191"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a12f2c1a11dd6e84196132ea77a99572a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>||std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;<ref refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" kindref="member">::type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(InputIT first, InputIT last)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type>InputIT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIT</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>construct a JSON container given an iterator range </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20198" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20198" bodyend="20298"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a33adf04c1d841c42c0eeaf05252aedc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename JsonRef</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structdetail_1_1is__json__ref" kindref="compound">detail::is_json_ref</ref>&lt; JsonRef &gt;, std::is_same&lt; typename JsonRef::value_type, <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const JsonRef &amp;ref)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type>const JsonRef &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20308" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20308" bodyend="20308"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac62e476c88b91f1f4329bb4901cafc4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const basic_json &amp;other)</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20312" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20312" bodyend="20376"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa269ba998ca2e15b2f596a8c074d125f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(basic_json &amp;&amp;other) noexcept</argsstring>
        <name>basic_json</name>
        <qualifiedname>basic_json::basic_json</qualifiedname>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move constructor </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20380" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20380" bodyend="20393"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a8cb70d0ea0c23ac40f1f3b67d40c174f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" noexceptexpression="std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;::value" virt="non-virtual">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
        <definition>basic_json &amp; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator=</definition>
        <argsstring>(basic_json other)</argsstring>
        <name>operator=</name>
        <qualifiedname>basic_json::operator=</qualifiedname>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy assignment </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator=/">https://json.nlohmann.me/api/basic_json/operator=/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20397" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20397" bodyend="20414"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad0209408ec1ed66ea5f89a7d72e57e43" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::~basic_json</definition>
        <argsstring>() noexcept</argsstring>
        <name>~basic_json</name>
        <qualifiedname>basic_json::~basic_json</qualifiedname>
        <briefdescription>
<para>destructor </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/~basic_json/">https://json.nlohmann.me/api/basic_json/~basic_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20418" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20418" bodyend="20422"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>iterators</header>
      <memberdef kind="function" id="classbasic__json_1a091a63384590fe2cf7a122155b30011a" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a46fc0d1886ed4635b3ff13e40d9c15e0" kindref="member">iteration_proxy</ref>&lt; <ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref> &gt;</type>
        <definition>static iteration_proxy&lt; iterator &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator_wrapper</definition>
        <argsstring>(reference ref) noexcept</argsstring>
        <name>iterator_wrapper</name>
        <qualifiedname>basic_json::iterator_wrapper</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>wrapper to access iterator member functions in range-based for </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</ulink> </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since 3.1.0 and will be removed in version 4.0.0 of the library. Please use <ref refid="classbasic__json_1a164b219291271e36e427d6b9c9916fec" kindref="member">items()</ref> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22033" column="28" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22033" bodyend="22036"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af373ec8f75f254b79fe1b1ca776797b9" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a46fc0d1886ed4635b3ff13e40d9c15e0" kindref="member">iteration_proxy</ref>&lt; <ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref> &gt;</type>
        <definition>static iteration_proxy&lt; const_iterator &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator_wrapper</definition>
        <argsstring>(const_reference ref) noexcept</argsstring>
        <name>iterator_wrapper</name>
        <qualifiedname>basic_json::iterator_wrapper</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>wrapper to access iterator member functions in range-based for </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</ulink> </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since 3.1.0 and will be removed in version 4.0.0 of the library. Please use <ref refid="classbasic__json_1a164b219291271e36e427d6b9c9916fec" kindref="member">items()</ref> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22044" column="28" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22044" bodyend="22047"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af7ba4755c9131259324caaa166146513" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>basic_json::begin</qualifiedname>
        <briefdescription>
<para>returns an iterator to the first element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/begin/">https://json.nlohmann.me/api/basic_json/begin/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21936" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21936" bodyend="21941"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aec74bf7ec122115d615a7f1be4122f9f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>basic_json::begin</qualifiedname>
        <briefdescription>
<para>returns an iterator to the first element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/begin/">https://json.nlohmann.me/api/basic_json/begin/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21945" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21945" bodyend="21948"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3451ab7e33828ded865a4c6c2e22463b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <qualifiedname>basic_json::cbegin</qualifiedname>
        <briefdescription>
<para>returns a const iterator to the first element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/cbegin/">https://json.nlohmann.me/api/basic_json/cbegin/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21952" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21952" bodyend="21957"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a06e303bfaafda414b4b5821384501bc1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>basic_json::end</qualifiedname>
        <briefdescription>
<para>returns an iterator to one past the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/end/">https://json.nlohmann.me/api/basic_json/end/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21961" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21961" bodyend="21966"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0409aa6e94198aaedff3f285d3c98e8c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>basic_json::end</qualifiedname>
        <briefdescription>
<para>returns an iterator to one past the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/end/">https://json.nlohmann.me/api/basic_json/end/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21970" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21970" bodyend="21973"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab4f83081d8b64f6dc9b079af13266dc1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <qualifiedname>basic_json::cend</qualifiedname>
        <briefdescription>
<para>returns an iterator to one past the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/cend/">https://json.nlohmann.me/api/basic_json/cend/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21977" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21977" bodyend="21982"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac8c2b82d885e4765ad078f475c777320" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac639cd1b4238d158286e7e21b5829709" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <qualifiedname>basic_json::rbegin</qualifiedname>
        <briefdescription>
<para>returns an iterator to the reverse-beginning </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/rbegin/">https://json.nlohmann.me/api/basic_json/rbegin/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21986" column="22" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21986" bodyend="21989"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9eb8bf73439e55c11983f51de32614b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2aa7d4c7719ab82aa8c77a83642c843f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <qualifiedname>basic_json::rbegin</qualifiedname>
        <briefdescription>
<para>returns an iterator to the reverse-beginning </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/rbegin/">https://json.nlohmann.me/api/basic_json/rbegin/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21993" column="28" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21993" bodyend="21996"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aaf8366e38224d6bb07c9ef7b21d96553" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac639cd1b4238d158286e7e21b5829709" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <qualifiedname>basic_json::rend</qualifiedname>
        <briefdescription>
<para>returns an iterator to the reverse-end </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/rend/">https://json.nlohmann.me/api/basic_json/rend/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22000" column="22" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22000" bodyend="22003"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aeeda19c8edb0398ba1c04575b077391d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2aa7d4c7719ab82aa8c77a83642c843f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <qualifiedname>basic_json::rend</qualifiedname>
        <briefdescription>
<para>returns an iterator to the reverse-end </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/rend/">https://json.nlohmann.me/api/basic_json/rend/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22007" column="28" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22007" bodyend="22010"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aed4f45b1b03cd315b3700dacb22d1fb3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2aa7d4c7719ab82aa8c77a83642c843f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <qualifiedname>basic_json::crbegin</qualifiedname>
        <briefdescription>
<para>returns a const reverse iterator to the last element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/crbegin/">https://json.nlohmann.me/api/basic_json/crbegin/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22014" column="28" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22014" bodyend="22017"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a463e1d370bf75906179dce60ad89a1ea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2aa7d4c7719ab82aa8c77a83642c843f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <qualifiedname>basic_json::crend</qualifiedname>
        <briefdescription>
<para>returns a const reverse iterator to one before the first </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/crend/">https://json.nlohmann.me/api/basic_json/crend/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22021" column="28" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22021" bodyend="22024"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a164b219291271e36e427d6b9c9916fec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a46fc0d1886ed4635b3ff13e40d9c15e0" kindref="member">iteration_proxy</ref>&lt; <ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref> &gt;</type>
        <definition>iteration_proxy&lt; iterator &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::items</definition>
        <argsstring>() noexcept</argsstring>
        <name>items</name>
        <qualifiedname>basic_json::items</qualifiedname>
        <briefdescription>
<para>helper to access iterator member functions in range-based for </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22051" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22051" bodyend="22054"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2b062fb036928f3c4c945c18609ca0ec" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a46fc0d1886ed4635b3ff13e40d9c15e0" kindref="member">iteration_proxy</ref>&lt; <ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref> &gt;</type>
        <definition>iteration_proxy&lt; const_iterator &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::items</definition>
        <argsstring>() const noexcept</argsstring>
        <name>items</name>
        <qualifiedname>basic_json::items</qualifiedname>
        <briefdescription>
<para>helper to access iterator member functions in range-based for </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22058" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22058" bodyend="22061"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>binary serialization/deserialization support</header>
      <memberdef kind="function" id="classbasic__json_1a12a270a8c98f23f838837562ddde18a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt; std::uint8_t &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_cbor</name>
        <qualifiedname>basic_json::to_cbor</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23382" column="24" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23382" bodyend="23387"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a91e6116b577c4a402d0bf59ceb1ce3b6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</argsstring>
        <name>to_cbor</name>
        <qualifiedname>basic_json::to_cbor</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23391" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23391" bodyend="23394"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4b49f22c2c0ed2c803c695f328ee5f4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_cbor</name>
        <qualifiedname>basic_json::to_cbor</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23398" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23398" bodyend="23401"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4d510f5c39b036deb96e61c8bef19f31" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt; std::uint8_t &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_msgpack</name>
        <qualifiedname>basic_json::to_msgpack</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23405" column="24" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23405" bodyend="23410"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad91a270a87e6aec97c18d44aaddf0d33" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</argsstring>
        <name>to_msgpack</name>
        <qualifiedname>basic_json::to_msgpack</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23414" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23414" bodyend="23417"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7e3ec809212107cb5809c386c5e3dce3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_msgpack</name>
        <qualifiedname>basic_json::to_msgpack</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23421" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23421" bodyend="23424"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a74a0e7569fb3170e0151e4aca3f4bf3b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt; std::uint8_t &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <qualifiedname>basic_json::to_ubjson</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a UBJSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23428" column="24" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23428" bodyend="23435"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad7567f6b4b51d3bc1cbe6a80cd6ca9a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <qualifiedname>basic_json::to_ubjson</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a UBJSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23439" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23439" bodyend="23443"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a81aecae4901eb995b22ee6abccf94122" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <qualifiedname>basic_json::to_ubjson</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a UBJSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23447" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23447" bodyend="23451"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2b222d92f075b0033a76a60ccb36269c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt; std::uint8_t &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bjdata</definition>
        <argsstring>(const basic_json &amp;j, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_bjdata</name>
        <qualifiedname>basic_json::to_bjdata</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a BJData serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23455" column="24" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23455" bodyend="23462"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9b4a7117f98423b6d92e48951a7e3c55" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bjdata</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_bjdata</name>
        <qualifiedname>basic_json::to_bjdata</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a BJData serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23466" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23466" bodyend="23470"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9c66ff3a69ef4e4d0d1c136d4226c6af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bjdata</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_bjdata</name>
        <qualifiedname>basic_json::to_bjdata</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a BJData serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23474" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23474" bodyend="23478"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a85f418313f92075a0ab72060bfe4de06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>static std::vector&lt; std::uint8_t &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_bson</name>
        <qualifiedname>basic_json::to_bson</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a BSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23482" column="24" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23482" bodyend="23487"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad5ff725ab08638fbc83ed7e3c7c41396" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</argsstring>
        <name>to_bson</name>
        <qualifiedname>basic_json::to_bson</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; std::uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a BSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23491" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23491" bodyend="23494"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a62bb643538ab0e016a2f319e22bf4c4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_bson</name>
        <qualifiedname>basic_json::to_bson</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classdetail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>create a BSON serialization of a given JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23498" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23498" bodyend="23501"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a84e2d9cbd8a385017bb3d91c45a1753a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <qualifiedname>basic_json::from_cbor</qualifiedname>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in CBOR format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_cbor/">https://json.nlohmann.me/api/basic_json/from_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23507" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23507" bodyend="23517"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a93872bc620a9bbe028be81a3eaae21f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <qualifiedname>basic_json::from_cbor</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in CBOR format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_cbor/">https://json.nlohmann.me/api/basic_json/from_cbor/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23523" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23523" bodyend="23533"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0dcdc5f7b4a7ebf4b2a1a21710ad246d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <qualifiedname>basic_json::from_cbor</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23538" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23538" bodyend="23544"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1adff52051e3e569f6f801b2d7b66124b1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <qualifiedname>basic_json::from_cbor</qualifiedname>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23549" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23549" bodyend="23560"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a96ba0ffab9429d589d658d3e053b8273" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <qualifiedname>basic_json::from_msgpack</qualifiedname>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in MessagePack format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_msgpack/">https://json.nlohmann.me/api/basic_json/from_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23566" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23566" bodyend="23575"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7f3794747f5b19e0504afa3585476e97" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <qualifiedname>basic_json::from_msgpack</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in MessagePack format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_msgpack/">https://json.nlohmann.me/api/basic_json/from_msgpack/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23581" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23581" bodyend="23590"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac347f43d4eb713aa711d6c8a5fca41cf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <qualifiedname>basic_json::from_msgpack</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23595" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23595" bodyend="23600"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2a29d7be59d39991efb3a584cd2e6598" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <qualifiedname>basic_json::from_msgpack</qualifiedname>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23604" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23604" bodyend="23614"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a662ee4905d8c2628b3018b378bbd4c9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <qualifiedname>basic_json::from_ubjson</qualifiedname>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in UBJSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_ubjson/">https://json.nlohmann.me/api/basic_json/from_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23620" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23620" bodyend="23629"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad36123b583eaae095ee46413e4e380ef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <qualifiedname>basic_json::from_ubjson</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in UBJSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_ubjson/">https://json.nlohmann.me/api/basic_json/from_ubjson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23635" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23635" bodyend="23644"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3d5a903e9aad342917fc3e98c070a0d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <qualifiedname>basic_json::from_ubjson</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23649" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23649" bodyend="23654"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a99be0ee4212c46c20ee32d4a1a90cc6c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <qualifiedname>basic_json::from_ubjson</qualifiedname>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23658" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23658" bodyend="23668"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1affeac471308bec4cfe026258f746cfcc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bjdata</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bjdata</name>
        <qualifiedname>basic_json::from_bjdata</qualifiedname>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BJData format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bjdata/">https://json.nlohmann.me/api/basic_json/from_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23675" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23675" bodyend="23684"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a94c00d3023a03b37d9a362cdf61c17c1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bjdata</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bjdata</name>
        <qualifiedname>basic_json::from_bjdata</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BJData format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bjdata/">https://json.nlohmann.me/api/basic_json/from_bjdata/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23690" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23690" bodyend="23699"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5ac8b0effce93dad2e3eec9c1a7ed129" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <qualifiedname>basic_json::from_bson</qualifiedname>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bson/">https://json.nlohmann.me/api/basic_json/from_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23705" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23705" bodyend="23714"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a06c87b306915435958b5e584dfb80ce4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <qualifiedname>basic_json::from_bson</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in BSON format </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/from_bson/">https://json.nlohmann.me/api/basic_json/from_bson/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23720" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23720" bodyend="23729"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa5d6a52ae542b7ffd137e87e72f9bcce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <qualifiedname>basic_json::from_bson</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23734" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23734" bodyend="23739"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a868a32e0da318e39872fb825b377bda6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <qualifiedname>basic_json::from_bson</qualifiedname>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23743" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23743" bodyend="23753"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>JSON Patch functions</header>
      <memberdef kind="function" id="classbasic__json_1aff2204c04cd35b2cef35f44b2b93ffc7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</definition>
        <argsstring>(const basic_json &amp;source, const basic_json &amp;target, const std::string &amp;path=&quot;&quot;)</argsstring>
        <name>diff</name>
        <qualifiedname>basic_json::diff</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>creates a diff as a JSON patch </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/diff/">https://json.nlohmann.me/api/basic_json/diff/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="24127" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="24127" bodyend="24257"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1adc2ae40925906c7e1d559b8bf12028a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch_inplace</definition>
        <argsstring>(const basic_json &amp;json_patch)</argsstring>
        <name>patch_inplace</name>
        <qualifiedname>basic_json::patch_inplace</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>json_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON patch in-place without copying the object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/patch/">https://json.nlohmann.me/api/basic_json/patch/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23846" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23846" bodyend="24113"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5a009b55b9dcdb30352f5f62537931b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</definition>
        <argsstring>(const basic_json &amp;json_patch) const</argsstring>
        <name>patch</name>
        <qualifiedname>basic_json::patch</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>json_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON patch to a copy of the current object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/patch/">https://json.nlohmann.me/api/basic_json/patch/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="24117" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="24117" bodyend="24122"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>object inspection</header>
      <description><para>Functions to inspect the type of a JSON value. </para>
</description>
      <memberdef kind="function" id="classbasic__json_1ac38b5f79c16205efb771e99be206b345" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref></type>
        <definition>string_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::dump</definition>
        <argsstring>(const int indent=-1, const char indent_char=&apos; &apos;, const bool ensure_ascii=false, const error_handler_t error_handler=error_handler_t::strict) const</argsstring>
        <name>dump</name>
        <qualifiedname>basic_json::dump</qualifiedname>
        <param>
          <type>const int</type>
          <declname>indent</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const char</type>
          <declname>indent_char</declname>
          <defval>&apos; &apos;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ensure_ascii</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" kindref="member">error_handler_t</ref></type>
          <declname>error_handler</declname>
          <defval>error_handler_t::strict</defval>
        </param>
        <briefdescription>
<para>serialization </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/dump/">https://json.nlohmann.me/api/basic_json/dump/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20437" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20437" bodyend="20455"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
        <definition>value_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <qualifiedname>basic_json::type</qualifiedname>
        <briefdescription>
<para>return the type of the JSON value (explicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/type/">https://json.nlohmann.me/api/basic_json/type/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20459" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20459" bodyend="20462"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a7fa8bc506b1519193a7bbc09f8a0f095" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_primitive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_primitive</name>
        <qualifiedname>basic_json::is_primitive</qualifiedname>
        <briefdescription>
<para>return whether type is primitive </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_primitive/">https://json.nlohmann.me/api/basic_json/is_primitive/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20466" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20466" bodyend="20469"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aded85ec1014821c21b8a47bc816a6917" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_structured</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_structured</name>
        <qualifiedname>basic_json::is_structured</qualifiedname>
        <briefdescription>
<para>return whether type is structured </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_structured/">https://json.nlohmann.me/api/basic_json/is_structured/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20473" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20473" bodyend="20476"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6ed948b2c2e71ce5f5c03b5eeb575df4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_null</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_null</name>
        <qualifiedname>basic_json::is_null</qualifiedname>
        <briefdescription>
<para>return whether value is null </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_null/">https://json.nlohmann.me/api/basic_json/is_null/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20480" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20480" bodyend="20483"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a814771ab0add0def16119c157b44003a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_boolean</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_boolean</name>
        <qualifiedname>basic_json::is_boolean</qualifiedname>
        <briefdescription>
<para>return whether value is a boolean </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_boolean/">https://json.nlohmann.me/api/basic_json/is_boolean/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20487" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20487" bodyend="20490"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab84294fe5d1a2822e2f67685f6e8c735" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number</name>
        <qualifiedname>basic_json::is_number</qualifiedname>
        <briefdescription>
<para>return whether value is a number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number/">https://json.nlohmann.me/api/basic_json/is_number/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20494" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20494" bodyend="20497"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad14438fe7c1f5a2f750eb56b8e73e538" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_integer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_integer</name>
        <qualifiedname>basic_json::is_number_integer</qualifiedname>
        <briefdescription>
<para>return whether value is an integer number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number_integer/">https://json.nlohmann.me/api/basic_json/is_number_integer/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20501" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20501" bodyend="20504"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa5744d3f2404f2376ab0dbe531e4d3bc" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_unsigned</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_unsigned</name>
        <qualifiedname>basic_json::is_number_unsigned</qualifiedname>
        <briefdescription>
<para>return whether value is an unsigned integer number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number_unsigned/">https://json.nlohmann.me/api/basic_json/is_number_unsigned/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20508" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20508" bodyend="20511"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa8c885a9182fd22b05826ab2a9548f60" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_float</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_float</name>
        <qualifiedname>basic_json::is_number_float</qualifiedname>
        <briefdescription>
<para>return whether value is a floating-point number </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_number_float/">https://json.nlohmann.me/api/basic_json/is_number_float/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20515" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20515" bodyend="20518"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af758a912346776b086abb82487b1d73b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_object</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_object</name>
        <qualifiedname>basic_json::is_object</qualifiedname>
        <briefdescription>
<para>return whether value is an object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_object/">https://json.nlohmann.me/api/basic_json/is_object/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20522" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20522" bodyend="20525"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a89ea48a4e802ef81783c0c7ce89aa7bb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_array</name>
        <qualifiedname>basic_json::is_array</qualifiedname>
        <briefdescription>
<para>return whether value is an array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_array/">https://json.nlohmann.me/api/basic_json/is_array/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20529" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20529" bodyend="20532"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3d4378552d27c9f15e4cb4ff4c075c94" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_string</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_string</name>
        <qualifiedname>basic_json::is_string</qualifiedname>
        <briefdescription>
<para>return whether value is a string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_string/">https://json.nlohmann.me/api/basic_json/is_string/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20536" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20536" bodyend="20539"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa25e81e71e2a263c0431f02f3245a8aa" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_binary</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_binary</name>
        <qualifiedname>basic_json::is_binary</qualifiedname>
        <briefdescription>
<para>return whether value is a binary array </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_binary/">https://json.nlohmann.me/api/basic_json/is_binary/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20543" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20543" bodyend="20546"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abcc7082bb9fa07704c659f6be7c41bc9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_discarded</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_discarded</name>
        <qualifiedname>basic_json::is_discarded</qualifiedname>
        <briefdescription>
<para>return whether value is discarded </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/is_discarded/">https://json.nlohmann.me/api/basic_json/is_discarded/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20550" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20550" bodyend="20553"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab025e8b5ac852c84758f92183b569b99" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator value_t</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator value_t</name>
        <qualifiedname>basic_json::operator value_t</qualifiedname>
        <briefdescription>
<para>return the type of the JSON value (implicit) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator_value_t/">https://json.nlohmann.me/api/basic_json/operator_value_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20557" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20557" bodyend="20560"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>lookup</header>
      <memberdef kind="function" id="classbasic__json_1a8ed11f83edce392fd94659b1102d078e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>find</name>
        <qualifiedname>basic_json::find</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21818" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21818" bodyend="21828"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a8d8085b05e9a2e6f187708bca5e22d04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>find</name>
        <qualifiedname>basic_json::find</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21832" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21832" bodyend="21842"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a81e01eb7be2878873ba084c0a0b20442" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</definition>
        <argsstring>(KeyType &amp;&amp;key)</argsstring>
        <name>find</name>
        <qualifiedname>basic_json::find</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21848" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21848" bodyend="21858"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a42890814a18f9c593f69218706113474" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" kindref="member">const_iterator</ref></type>
        <definition>const_iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>find</name>
        <qualifiedname>basic_json::find</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21864" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21864" bodyend="21874"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac122e03d4d28d6a03c01abaa7229d4c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::count</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>count</name>
        <qualifiedname>basic_json::count</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the number of occurrences of a key in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/count/">https://json.nlohmann.me/api/basic_json/count/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21878" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21878" bodyend="21882"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a06e36a368cbf554fc817b0cb3e37e3a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::count</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>count</name>
        <qualifiedname>basic_json::count</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the number of occurrences of a key in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/count/">https://json.nlohmann.me/api/basic_json/count/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21888" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21888" bodyend="21892"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3815a53b61818c87cf677f4a1ea5b7e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>contains</name>
        <qualifiedname>basic_json::contains</qualifiedname>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21896" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21896" bodyend="21899"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a56dbcc61c27689659fa1d94a19bd2560" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class KeyType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" kindref="member">detail::is_usable_as_basic_json_key_type</ref>&lt; <ref refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" kindref="member">basic_json_t</ref>, KeyType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains</definition>
        <argsstring>(KeyType &amp;&amp;key) const</argsstring>
        <name>contains</name>
        <qualifiedname>basic_json::contains</qualifiedname>
        <param>
          <type>KeyType &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21905" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21905" bodyend="21908"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0d7241e94ede5aacd7efca401cf0638a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>contains</name>
        <qualifiedname>basic_json::contains</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object given a JSON pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21912" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21912" bodyend="21915"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a74b0b7791993c4ae48532f9b427bc518" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains</definition>
        <argsstring>(const typename ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;ptr) const</argsstring>
        <name>contains</name>
        <qualifiedname>basic_json::contains</qualifiedname>
        <param>
          <type>const typename ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="21919" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="21919" bodyend="21922"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>capacity</header>
      <memberdef kind="function" id="classbasic__json_1aec22254018236106f357bc3ed7c20399" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>basic_json::empty</qualifiedname>
        <briefdescription>
<para>checks whether the container is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/empty/">https://json.nlohmann.me/api/basic_json/empty/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22075" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22075" bodyend="22110"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a769537e4631ccd39b5ab3753547a8274" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>basic_json::size</qualifiedname>
        <briefdescription>
<para>returns the number of elements </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/size/">https://json.nlohmann.me/api/basic_json/size/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22114" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22114" bodyend="22149"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6d46cece4c9f4700e4d6ac9565bde067" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" kindref="member">size_type</ref></type>
        <definition>size_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <qualifiedname>basic_json::max_size</qualifiedname>
        <briefdescription>
<para>returns the maximum possible number of elements </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/max_size/">https://json.nlohmann.me/api/basic_json/max_size/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="22153" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="22153" bodyend="22183"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>JSON Pointer functions</header>
      <memberdef kind="function" id="classbasic__json_1a2f0b9af87d5c9c8bed6dc0e165af3147" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23765" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23765" bodyend="23768"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a6ca526e935364213525dd8e23397472c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;ptr)</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23772" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23772" bodyend="23775"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9ba36b6659d266fd0299446a20b611d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23779" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23779" bodyend="23782"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a8ed2a2a59c3437b4b57e4f0b03e4333a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;ptr) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>basic_json::operator[]</qualifiedname>
        <param>
          <type>const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23786" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23786" bodyend="23789"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a0a5249193b987b187efa74353c9b5b43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23793" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23793" bodyend="23796"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af1daebc285b407ce97a080a90ead681a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;ptr)</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23800" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23800" bodyend="23803"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac7d4becb69fb528514395b46d123b69a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23807" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23807" bodyend="23810"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa4a6aa1ba673eda8f96506b8dfc243df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;<ref refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" kindref="member">::value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref></type>
        <definition>const_reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;ptr) const</argsstring>
        <name>at</name>
        <qualifiedname>basic_json::at</qualifiedname>
        <param>
          <type>const ::nlohmann::json_pointer&lt; BasicJsonType &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23814" column="21" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23814" bodyend="23817"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a9331162af6752277de4d1e476bb3f6bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::flatten</definition>
        <argsstring>() const</argsstring>
        <name>flatten</name>
        <qualifiedname>basic_json::flatten</qualifiedname>
        <briefdescription>
<para>return flattened JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/flatten/">https://json.nlohmann.me/api/basic_json/flatten/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23821" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23821" bodyend="23826"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a91ef6a13e3205323b67700c3e5e672c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::unflatten</definition>
        <argsstring>() const</argsstring>
        <name>unflatten</name>
        <qualifiedname>basic_json::unflatten</qualifiedname>
        <briefdescription>
<para>unflatten a previously flattened JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/unflatten/">https://json.nlohmann.me/api/basic_json/unflatten/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23830" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23830" bodyend="23833"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>JSON Merge Patch functions</header>
      <memberdef kind="function" id="classbasic__json_1a1c7ab88eb6d043b434cd9e0b68ec7321" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::merge_patch</definition>
        <argsstring>(const basic_json &amp;apply_patch)</argsstring>
        <name>merge_patch</name>
        <qualifiedname>basic_json::merge_patch</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>apply_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON Merge Patch </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/merge_patch/">https://json.nlohmann.me/api/basic_json/merge_patch/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="24269" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="24269" bodyend="24293"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" prot="private" static="no">
        <type><ref refid="json_8hpp_1a80b7254e63f199a1f656f07ae551f632" kindref="member">NLOHMANN_BASIC_JSON_TPL</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json_t =  NLOHMANN_BASIC_JSON_TPL</definition>
        <argsstring></argsstring>
        <name>basic_json_t</name>
        <qualifiedname>basic_json::basic_json_t</qualifiedname>
        <briefdescription>
<para>workaround type for MSVC </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19299" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1afef078ae0e400601f9c2f54f247b9d1b" prot="private" static="no">
        <type>::nlohmann::detail::primitive_iterator_t</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::primitive_iterator_t =  ::nlohmann::detail::primitive_iterator_t</definition>
        <argsstring></argsstring>
        <name>primitive_iterator_t</name>
        <qualifiedname>basic_json::primitive_iterator_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19318" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aa172a3d71130fb652f695297cb34491d" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::internal_iterator&lt; BasicJsonType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::internal_iterator =  ::nlohmann::detail::internal_iterator&lt;BasicJsonType&gt;</definition>
        <argsstring></argsstring>
        <name>internal_iterator</name>
        <qualifiedname>basic_json::internal_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19320" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1aba0def4a0dbcc3ab08fc802f9acef967" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::iter_impl&lt; BasicJsonType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iter_impl =  ::nlohmann::detail::iter_impl&lt;BasicJsonType&gt;</definition>
        <argsstring></argsstring>
        <name>iter_impl</name>
        <qualifiedname>basic_json::iter_impl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19322" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a46fc0d1886ed4635b3ff13e40d9c15e0" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::iteration_proxy&lt; Iterator &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iteration_proxy =  ::nlohmann::detail::iteration_proxy&lt;Iterator&gt;</definition>
        <argsstring></argsstring>
        <name>iteration_proxy</name>
        <qualifiedname>basic_json::iteration_proxy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19324" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a38142568f1a74d291c3442a70f6a2d2a" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename Base</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::json_reverse_iterator&lt; Base &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_reverse_iterator =  ::nlohmann::detail::json_reverse_iterator&lt;Base&gt;</definition>
        <argsstring></argsstring>
        <name>json_reverse_iterator</name>
        <qualifiedname>basic_json::json_reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19325" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a11e46bddc70377800c1a754780f28507" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::output_adapter_t&lt; CharType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::output_adapter_t =  ::nlohmann::detail::output_adapter_t&lt;CharType&gt;</definition>
        <argsstring></argsstring>
        <name>output_adapter_t</name>
        <qualifiedname>basic_json::output_adapter_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19328" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a409ee6f0174dbfeb9af70a9249301364" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::binary_reader&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, InputType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary_reader =  ::nlohmann::detail::binary_reader&lt;basic_json, InputType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_reader</name>
        <qualifiedname>basic_json::binary_reader</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19331" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a95953befdb9a71334700748ccd2f0cee" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::binary_writer&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, CharType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary_writer =  ::nlohmann::detail::binary_writer&lt;basic_json, CharType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_writer</name>
        <qualifiedname>basic_json::binary_writer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19332" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19332" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classbasic__json_1aea7fcb38964d53d35e84a80b8b1e8d11" prot="public" static="no">
        <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">detail::value_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value_t =  detail::value_t</definition>
        <argsstring></argsstring>
        <name>value_t</name>
        <qualifiedname>basic_json::value_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19338" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" prot="public" static="no">
        <type>::nlohmann::json_pointer&lt; StringType &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_pointer =  ::nlohmann::json_pointer&lt;StringType&gt;</definition>
        <argsstring></argsstring>
        <name>json_pointer</name>
        <qualifiedname>basic_json::json_pointer</qualifiedname>
        <briefdescription>
<para>JSON Pointer, see nlohmann::json_pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19340" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename SFINAE</type>
          </param>
        </templateparamlist>
        <type>JSONSerializer&lt; T, SFINAE &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_serializer =  JSONSerializer&lt;T, SFINAE&gt;</definition>
        <argsstring></argsstring>
        <name>json_serializer</name>
        <qualifiedname>basic_json::json_serializer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19342" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1abbc0836764d6ba2580ee0c775ceeeab7" prot="public" static="no">
        <type><ref refid="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" kindref="member">detail::error_handler_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::error_handler_t =  detail::error_handler_t</definition>
        <argsstring></argsstring>
        <name>error_handler_t</name>
        <qualifiedname>basic_json::error_handler_t</qualifiedname>
        <briefdescription>
<para>how to treat decoding errors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19344" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a2373759df24fffb094fd7789c726abe1" prot="public" static="no">
        <type><ref refid="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" kindref="member">detail::cbor_tag_handler_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbor_tag_handler_t =  detail::cbor_tag_handler_t</definition>
        <argsstring></argsstring>
        <name>cbor_tag_handler_t</name>
        <qualifiedname>basic_json::cbor_tag_handler_t</qualifiedname>
        <briefdescription>
<para>how to treat CBOR tags </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19346" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" prot="public" static="no">
        <type>std::initializer_list&lt; <ref refid="classdetail_1_1json__ref" kindref="compound">detail::json_ref</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt; &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::initializer_list_t =  std::initializer_list&lt;detail::json_ref&lt;basic_json&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>initializer_list_t</name>
        <qualifiedname>basic_json::initializer_list_t</qualifiedname>
        <briefdescription>
<para>helper type for initializer lists of <ref refid="classbasic__json" kindref="compound">basic_json</ref> values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19348" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a0bcf8e1a03522bf1ea9bb6fb49251dab" prot="public" static="no">
        <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">detail::input_format_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::input_format_t =  detail::input_format_t</definition>
        <argsstring></argsstring>
        <name>input_format_t</name>
        <qualifiedname>basic_json::input_format_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19350" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a0c291e7719ceccef199189e5ee4ecd4f" prot="public" static="no">
        <type><ref refid="structjson__sax" kindref="compound">json_sax</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_sax_t =  json_sax&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>json_sax_t</name>
        <qualifiedname>basic_json::json_sax_t</qualifiedname>
        <briefdescription>
<para>SAX interface type, see nlohmann::json_sax. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19352" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1adfe811a234bbc90f4a0d3c6488272186" prot="public" static="no">
        <type><ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312ef" kindref="member">detail::parse_event_t</ref></type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse_event_t =  detail::parse_event_t</definition>
        <argsstring></argsstring>
        <name>parse_event_t</name>
        <qualifiedname>basic_json::parse_event_t</qualifiedname>
        <briefdescription>
<para>parser event types </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/parse_event_t/">https://json.nlohmann.me/api/basic_json/parse_event_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19966" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19966" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classbasic__json_1a144c201819ed5c9d9f58b59eb64fb454" prot="public" static="no">
        <type><ref refid="namespacedetail_1affc9951a9c138c79d63e6f4702e37a1a" kindref="member">detail::parser_callback_t</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parser_callback_t =  detail::parser_callback_t&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>parser_callback_t</name>
        <qualifiedname>basic_json::parser_callback_t</qualifiedname>
        <briefdescription>
<para>per-element parser callback type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/parser_callback_t/">https://json.nlohmann.me/api/basic_json/parser_callback_t/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19970" column="5" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19970" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classbasic__json_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">detail::value_t</ref></type>
          </param>
        </templateparamlist>
        <type>struct</type>
        <definition>friend struct detail::external_constructor</definition>
        <argsstring></argsstring>
        <name>detail::external_constructor</name>
        <qualifiedname>basic_json::external_constructor</qualifiedname>
        <param>
          <type><ref refid="structdetail_1_1external__constructor" kindref="compound">detail::external_constructor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19276" column="29" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a43f901b14cf3f7135269b0c75c9ac233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::json_pointer</definition>
        <argsstring></argsstring>
        <name>::nlohmann::json_pointer</name>
        <qualifiedname>basic_json::json_pointer</qualifiedname>
        <param>
          <type>::nlohmann::json_pointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19279" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1ac8f3125911eb018ef4ab00d879487baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::parser</name>
        <qualifiedname>basic_json::parser</qualifiedname>
        <param>
          <type>::nlohmann::detail::parser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19284" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a842e5c7ca096025c18b11e715d3401f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::iter_impl</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::iter_impl</name>
        <qualifiedname>basic_json::iter_impl</qualifiedname>
        <param>
          <type>::nlohmann::detail::iter_impl</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19287" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a69d491bbda88ade6d3c7a2b11309e8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::binary_writer</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::binary_writer</name>
        <qualifiedname>basic_json::binary_writer</qualifiedname>
        <param>
          <type>::nlohmann::detail::binary_writer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19289" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1aa226ed5103dfd10e27e562d35a3a106b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
          <param>
            <type>typename SAX</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::binary_reader</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::binary_reader</name>
        <qualifiedname>basic_json::binary_reader</qualifiedname>
        <param>
          <type>::nlohmann::detail::binary_reader</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19291" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::json_sax_dom_parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::json_sax_dom_parser</name>
        <qualifiedname>basic_json::json_sax_dom_parser</qualifiedname>
        <param>
          <type>::nlohmann::detail::json_sax_dom_parser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19293" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1a95574da8d12905ea99dc348934c837da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class ::nlohmann::detail::json_sax_dom_callback_parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::json_sax_dom_callback_parser</name>
        <qualifiedname>basic_json::json_sax_dom_callback_parser</qualifiedname>
        <param>
          <type>::nlohmann::detail::json_sax_dom_callback_parser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19295" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1abdcb15d025676b4d3db0f32a50f4393f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ::nlohmann::detail::exception</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::exception</name>
        <qualifiedname>basic_json::exception</qualifiedname>
        <param>
          <type>::nlohmann::detail::exception</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19296" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1af9907af448f7ff794120033e132025f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&lt;&lt;</definition>
        <argsstring>(basic_json &amp;j, std::istream &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>basic_json::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator_gtgt/">https://json.nlohmann.me/api/basic_json/operator_gtgt/</ulink> </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated since 3.0.0 and will be removed in version 4.0.0 of the library. Please use <ref refid="classbasic__json_1aea0de29387d532e0bc5f2475cb83995d" kindref="member">operator&gt;&gt;(std::istream&amp;, basic_json&amp;)</ref> instead; that is, replace calls like <computeroutput>j &lt;&lt; i;</computeroutput> with <computeroutput>i &gt;&gt; j;</computeroutput>. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23307" column="12" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23307" bodyend="23310"/>
      </memberdef>
      <memberdef kind="friend" id="classbasic__json_1aea0de29387d532e0bc5f2475cb83995d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;i, basic_json &amp;j)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>basic_json::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classbasic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/operator_gtgt/">https://json.nlohmann.me/api/basic_json/operator_gtgt/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23314" column="25" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23314" bodyend="23318"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbasic__json_1a15f9acedcae46772030f652b18f8b98b" prot="private" static="no" mutable="no">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <qualifiedname>basic_json::__pad0__</qualifiedname>
        <bitfield> using lexer = ::nlohmann::detail::lexer_base&lt;basic_json&gt;</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19301" column="3" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1abcb952da690392e391ce9c4dc41727d9" prot="private" static="no" mutable="no">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad1__</definition>
        <argsstring></argsstring>
        <name>__pad1__</name>
        <qualifiedname>basic_json::__pad1__</qualifiedname>
        <bitfield> using serializer = ::nlohmann::detail::serializer&lt;basic_json&gt;</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19334" column="3" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a39b01253ca65e8f5abdc1796d6ee0012" prot="private" static="no" mutable="no">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad2__</definition>
        <argsstring></argsstring>
        <name>__pad2__</name>
        <qualifiedname>basic_json::__pad2__</qualifiedname>
        <bitfield> union json_value { object_t* object</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19575" column="3" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a85fdfa4bdeca94ed5b104e621aae29f4" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> *</type>
        <definition>array_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array</definition>
        <argsstring></argsstring>
        <name>array</name>
        <qualifiedname>basic_json::array</qualifiedname>
        <briefdescription>
<para>array (stored with pointer to save storage) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19606" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a51ff696f79f93c34b06cfad8dae08791" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> *</type>
        <definition>string_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::string</definition>
        <argsstring></argsstring>
        <name>string</name>
        <qualifiedname>basic_json::string</qualifiedname>
        <briefdescription>
<para>string (stored with pointer to save storage) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19608" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a731dc2210798a3d11d81fa0f6b5600a6" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> *</type>
        <definition>binary_t* basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring></argsstring>
        <name>binary</name>
        <qualifiedname>basic_json::binary</qualifiedname>
        <briefdescription>
<para>binary (stored with pointer to save storage) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19610" column="18" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a82789a596dcaca0c1abe4ee085d8548f" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref></type>
        <definition>boolean_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::boolean</definition>
        <argsstring></argsstring>
        <name>boolean</name>
        <qualifiedname>basic_json::boolean</qualifiedname>
        <briefdescription>
<para>boolean </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19612" column="19" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a715bb7e41d34cffd430ce70750d18afa" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref></type>
        <definition>number_integer_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_integer</definition>
        <argsstring></argsstring>
        <name>number_integer</name>
        <qualifiedname>basic_json::number_integer</qualifiedname>
        <briefdescription>
<para>number (integer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19614" column="26" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a3851a3c991ee19ecb7e8ac4e902554e4" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref></type>
        <definition>number_unsigned_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_unsigned</definition>
        <argsstring></argsstring>
        <name>number_unsigned</name>
        <qualifiedname>basic_json::number_unsigned</qualifiedname>
        <briefdescription>
<para>number (unsigned integer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19616" column="27" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a1a16d7dd42628594ff0f8be9a3ffdddb" prot="private" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref></type>
        <definition>number_float_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_float</definition>
        <argsstring></argsstring>
        <name>number_float</name>
        <qualifiedname>basic_json::number_float</qualifiedname>
        <briefdescription>
<para>number (floating-point) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19618" column="24" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19618" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classbasic__json_1aba63131a6c69e3f5121632d496c9b708" prot="public" static="no" mutable="no">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad4__</definition>
        <argsstring></argsstring>
        <name>__pad4__</name>
        <qualifiedname>basic_json::__pad4__</qualifiedname>
        <bitfield> value_t m_type = value_t::null</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23356" column="3" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbasic__json_1a34bc6074bd3f9ac2bdab12ebc02d70f5" prot="public" static="no" mutable="no">
        <type><ref refid="classbasic__json_1a81c0a3d40f098944971b954cbf417671" kindref="member">json_value</ref></type>
        <definition>json_value basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <qualifiedname>basic_json::m_value</qualifiedname>
        <initializer>= {}</initializer>
        <briefdescription>
<para>the value of the current element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23365" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23365" bodyend="23365"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classbasic__json_1a639b07cc44c1088baff926e2187ac35b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputAdapterType</type>
          </param>
        </templateparamlist>
        <type>::nlohmann::detail::parser&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref>, InputAdapterType &gt;</type>
        <definition>static ::nlohmann::detail::parser&lt; basic_json, InputAdapterType &gt; basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parser</definition>
        <argsstring>(InputAdapterType adapter, detail::parser_callback_t&lt; basic_json &gt;cb=nullptr, const bool allow_exceptions=true, const bool ignore_comments=false)</argsstring>
        <name>parser</name>
        <qualifiedname>basic_json::parser</qualifiedname>
        <param>
          <type>InputAdapterType</type>
          <declname>adapter</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1affc9951a9c138c79d63e6f4702e37a1a" kindref="member">detail::parser_callback_t</ref>&lt; <ref refid="classbasic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19306" column="39" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19306" bodyend="19315"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a81c0a3d40f098944971b954cbf417671" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>()=default</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <briefdescription>
<para>default constructor (for null values) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19621" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1af76023f007d485a9a7b857ca837731" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(boolean_t v) noexcept</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for booleans </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19623" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19623" bodyend="19623"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aba6aa773dbdfd5d189c00f600e963a35" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(number_integer_t v) noexcept</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (integer) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19625" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19625" bodyend="19625"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aea3c1a165faa64cca1a42beab5a81f98" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(number_unsigned_t v) noexcept</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (unsigned) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19627" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19627" bodyend="19627"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ad2f07eb9707781c293cfffe58e146401" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(number_float_t v) noexcept</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (floating-point) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19629" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19629" bodyend="19629"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a82b673260a265e8ecef44ceee9a466a3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(value_t t)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>constructor for empty values of a given type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19631" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19631" bodyend="19700"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a87e923794044b65f2c25eeee51da11cb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const string_t &amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for strings </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19703" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19703" bodyend="19703"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af4aa63ba141fd81c1678c0534eb50548" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(string_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue strings </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19706" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19706" bodyend="19706"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3dab4b04d91104ace89951b989b6ffc4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const object_t &amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for objects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19709" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19709" bodyend="19709"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abd0f76bc289915a78bad58f46773cfe9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(object_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue objects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19712" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19712" bodyend="19712"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab2dd58dcd8dfa835ed75474e19b860f8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const array_t &amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19715" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19715" bodyend="19715"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a814c8103c4e8bf15b2392f0841b86243" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(array_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19718" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19718" bodyend="19718"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae910b1e18799654f9591ac3094023e59" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const typename binary_t::container_type &amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type>const typename binary_t::container_type &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for binary arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19721" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19721" bodyend="19721"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a024d6ab3e25fe8b0b17f83c675989b19" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type>typename binary_t::container_type &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue binary arrays </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19724" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19724" bodyend="19724"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1622e79c503e4eb25b34196b4d439832" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const binary_t &amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for binary arrays (internal type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19727" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19727" bodyend="19727"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab344e491e4c254162bfaf87bf49ae0e3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(binary_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <qualifiedname>basic_json::json_value</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue binary arrays (internal type) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19730" column="9" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19730" bodyend="19730"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a02aab01e14ceff4a078019f7bd212ac7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::destroy</definition>
        <argsstring>(value_t t)</argsstring>
        <name>destroy</name>
        <qualifiedname>basic_json::destroy</qualifiedname>
        <param>
          <type><ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19732" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19732" bodyend="19828"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1adee26a05c7e837cf1b8042de9331484b" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::assert_invariant</definition>
        <argsstring>(bool check_parents=true) const noexcept</argsstring>
        <name>assert_invariant</name>
        <qualifiedname>basic_json::assert_invariant</qualifiedname>
        <param>
          <type>bool</type>
          <declname>check_parents</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>checks the class invariants </para>
        </briefdescription>
        <detaileddescription>
<para>This function asserts the class invariants. It needs to be called at the end of every constructor to make sure that created objects respect the invariant. Furthermore, it has to be called each time the type of a JSON value is changed, because the invariant expresses a relationship between <emphasis>m_type</emphasis> and <emphasis>m_value</emphasis>.</para>
<para>Furthermore, the parent relation is checked for arrays and objects: If <emphasis>check_parents</emphasis> true and the value is an array or object, then the container&apos;s elements must have the current value as parent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">check_parents</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the parent relation should be checked. The value is true by default and should only be set to false during destruction of objects when the invariant does not need to hold. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19850" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19850" bodyend="19869"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a09f896094c3329506b31e40207cc9d2f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::set_parents</definition>
        <argsstring>()</argsstring>
        <name>set_parents</name>
        <qualifiedname>basic_json::set_parents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19871" column="10" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19871" bodyend="19906"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac89414a26a04db88499c4b17d065e0c2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
        <definition>iterator basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::set_parents</definition>
        <argsstring>(iterator it, typename iterator::difference_type count_set_parents)</argsstring>
        <name>set_parents</name>
        <qualifiedname>basic_json::set_parents</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" kindref="member">iterator</ref></type>
          <declname>it</declname>
        </param>
        <param>
          <type>typename iterator::difference_type</type>
          <declname>count_set_parents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19908" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19908" bodyend="19919"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ae19ce7ef03dbaab05e8b38941800bef0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
        <definition>reference basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::set_parent</definition>
        <argsstring>(reference j, std::size_t old_capacity=static_cast&lt; std::size_t &gt;(-1))</argsstring>
        <name>set_parent</name>
        <qualifiedname>basic_json::set_parent</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" kindref="member">reference</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>old_capacity</declname>
          <defval>static_cast&lt; std::size_t &gt;(-1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19921" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19921" bodyend="19957"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5c1dbb7957e2224af836fca54b593801" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref></type>
        <definition>boolean_t basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(boolean_t *) const</argsstring>
        <name>get_impl</name>
        <qualifiedname>basic_json::get_impl</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a boolean (explicit) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20570" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20570" bodyend="20578"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a377655ce708e04fc796ca7307cbb0bae" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref> *</type>
        <definition>object_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(object_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20581" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20581" bodyend="20584"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a445f688fdcfea5febb5b3b3eeda096d0" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref> *</type>
        <definition>const object_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const object_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20587" column="30" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20587" bodyend="20590"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5aaa765a56c67646a8c25052af8e5254" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> *</type>
        <definition>array_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(array_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20593" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20593" bodyend="20596"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2300408cebd418f14af6a9aaab4c97f8" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> *</type>
        <definition>const array_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const array_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20599" column="29" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20599" bodyend="20602"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a3c1f25809afade6c541d7c1043a37ffa" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> *</type>
        <definition>string_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(string_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20605" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20605" bodyend="20608"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ac786fddc620d6bc33680baba5907ab5b" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> *</type>
        <definition>const string_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const string_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20611" column="30" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20611" bodyend="20614"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a1e35fe38856e6aa3a722b24be3e65846" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref> *</type>
        <definition>boolean_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(boolean_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20617" column="15" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20617" bodyend="20620"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1aa1de01eeb243f97041bfb6e5b3890474" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref> *</type>
        <definition>const boolean_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const boolean_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20623" column="31" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20623" bodyend="20626"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a5a2ac6016ca45ad0a125d395dafe852e" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref> *</type>
        <definition>number_integer_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(number_integer_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20629" column="22" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20629" bodyend="20632"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a662e420ed7ec3ffb07f034029e1905da" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref> *</type>
        <definition>const number_integer_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const number_integer_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20635" column="38" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20635" bodyend="20638"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af3b49e9769b754496f229c447ffcd6ff" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref> *</type>
        <definition>number_unsigned_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(number_unsigned_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20641" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20641" bodyend="20644"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1af4455662bb6f37ba1acc4ea645d03dff" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref> *</type>
        <definition>const number_unsigned_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const number_unsigned_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20647" column="39" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20647" bodyend="20650"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1afc2a176f53df2bb3ac316a20658f47d1" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref> *</type>
        <definition>number_float_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(number_float_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20653" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20653" bodyend="20656"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ab22c82a09d6d5ff6d637832d43bf84f5" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref> *</type>
        <definition>const number_float_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const number_float_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20659" column="36" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20659" bodyend="20662"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1ada65706f8ebb5939856054f1aed7af60" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> *</type>
        <definition>binary_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(binary_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type><ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (binary) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20665" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20665" bodyend="20668"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a918c4967f40d26352b93841677c90a93" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> *</type>
        <definition>const binary_t * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const binary_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <qualifiedname>basic_json::get_impl_ptr</qualifiedname>
        <param>
          <type>const <ref refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" kindref="member">binary_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (binary) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20671" column="30" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20671" bodyend="20674"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classbasic__json_1a1aaddd9686fb1dd50203c2138858df7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbasic__json_1a485873eed243b6ca7e30c96130a5ec2d" kindref="member">allocator_type</ref></type>
        <definition>static allocator_type basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_allocator</definition>
        <argsstring>()</argsstring>
        <name>get_allocator</name>
        <qualifiedname>basic_json::get_allocator</qualifiedname>
        <briefdescription>
<para>returns the allocator associated with the container </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/get_allocator/">https://json.nlohmann.me/api/basic_json/get_allocator/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19416" column="27" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19416" bodyend="19419"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a08303da85f75965764bb0c8d8b79a449" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="classbasic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::meta</definition>
        <argsstring>()</argsstring>
        <name>meta</name>
        <qualifiedname>basic_json::meta</qualifiedname>
        <briefdescription>
<para>returns version information on the library </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/meta/">https://json.nlohmann.me/api/basic_json/meta/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19424" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19424" bodyend="19485"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a2eae76ffa6335685fa38190a18806d55" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref> <ref refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" kindref="member">const_reference</ref> bool static SAX bool</type>
        <definition>JSON_PRIVATE_UNLESS_TESTED const_reference bool static SAX bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse</definition>
        <argsstring>(InputType &amp;&amp;i, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <qualifiedname>basic_json::sax_parse</qualifiedname>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval>input_format_t::json</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23253" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23253" bodyend="23262"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a4e2094d16fe8fd49c20eca61fa88d602" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>class SAX</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse</definition>
        <argsstring>(IteratorType first, IteratorType last, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <qualifiedname>basic_json::sax_parse</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval>input_format_t::json</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate SAX events </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/sax_parse/">https://json.nlohmann.me/api/basic_json/sax_parse/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23268" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23268" bodyend="23277"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1a696ab4a7073c479bb1ef24c23c3d3d67" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SAX</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <qualifiedname>basic_json::sax_parse</qualifiedname>
        <param>
          <type><ref refid="classdetail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval>input_format_t::json</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate SAX events </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/sax_parse/">https://json.nlohmann.me/api/basic_json/sax_parse/</ulink> </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated since 3.8.0 and will be removed in version 4.0.0 of the library. Please use sax_parse(ptr, ptr + len) instead. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23287" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23287" bodyend="23298"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classbasic__json_1a005ee8bc7a25b793688e301ac8287165" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" kindref="member">JSON_HEDLEY_RETURNS_NON_NULL</ref> T *</type>
        <definition>static JSON_HEDLEY_RETURNS_NON_NULL T * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::create</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>create</name>
        <qualifiedname>basic_json::create</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>helper for exception-safe object creation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19556" column="14" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19556" bodyend="19569"/>
      </memberdef>
      <memberdef kind="function" id="classbasic__json_1abe9356f177f5d7bd476f6a4158d8a06a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename ThisType</type>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>static ReferenceType basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref_impl</definition>
        <argsstring>(ThisType &amp;obj)</argsstring>
        <name>get_ref_impl</name>
        <qualifiedname>basic_json::get_ref_impl</qualifiedname>
        <param>
          <type>ThisType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>helper function to implement <ref refid="classbasic__json_1a7bfdaa5014da75e18dd07cc76e53b237" kindref="member">get_ref()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>This function helps to implement <ref refid="classbasic__json_1a7bfdaa5014da75e18dd07cc76e53b237" kindref="member">get_ref()</ref> without code duplication for const and non-const overloads</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ThisType</parametername>
</parameternamelist>
<parameterdescription>
<para>will be deduced as <computeroutput><ref refid="classbasic__json" kindref="compound">basic_json</ref></computeroutput> or <computeroutput>const <ref refid="classbasic__json" kindref="compound">basic_json</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>if ReferenceType does not match underlying value type of the current JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="20688" column="26" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="20688" bodyend="20699"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classbasic__json_1a7528ae3cfe082b3e6280eb5dfab4700b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" kindref="member">JSON_HEDLEY_RETURNS_NON_NULL</ref> const char *</type>
        <definition>JSON_HEDLEY_RETURNS_NON_NULL const char * basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type_name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type_name</name>
        <qualifiedname>basic_json::type_name</qualifiedname>
        <briefdescription>
<para>return the type as string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/type_name/">https://json.nlohmann.me/api/basic_json/type_name/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="23329" column="16" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="23329" bodyend="23353"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>namespace for Niels Lohmann </para>
    </briefdescription>
    <detaileddescription>
<para>a class to store JSON values <simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/basic_json/">https://json.nlohmann.me/api/basic_json/</ulink></para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://github.com/nlohmann">https://github.com/nlohmann</ulink> </para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0</para>
</simplesect>
a class to store JSON values</para>
<para><simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</label>
        <link refid="classbasic__json"/>
        <childnode refid="2" relation="usage">
          <edgelabel>inverse</edgelabel>
          <edgelabel>rhs</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</label>
        <link refid="classbasic__json"/>
        <childnode refid="2" relation="usage">
          <edgelabel>inverse</edgelabel>
          <edgelabel>rhs</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="19273" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="19274" bodyend="24296"/>
    <listofallmembers>
      <member refid="classbasic__json_1aa226ed5103dfd10e27e562d35a3a106b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::binary_reader</name></member>
      <member refid="classbasic__json_1a69d491bbda88ade6d3c7a2b11309e8bf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::binary_writer</name></member>
      <member refid="classbasic__json_1abdcb15d025676b4d3db0f32a50f4393f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::exception</name></member>
      <member refid="classbasic__json_1a842e5c7ca096025c18b11e715d3401f4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::iter_impl</name></member>
      <member refid="classbasic__json_1a95574da8d12905ea99dc348934c837da" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::json_sax_dom_callback_parser</name></member>
      <member refid="classbasic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::json_sax_dom_parser</name></member>
      <member refid="classbasic__json_1ac8f3125911eb018ef4ab00d879487baf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::detail::parser</name></member>
      <member refid="classbasic__json_1a43f901b14cf3f7135269b0c75c9ac233" prot="public" virt="non-virtual"><scope>basic_json</scope><name>::nlohmann::json_pointer</name></member>
      <member refid="classbasic__json_1a15f9acedcae46772030f652b18f8b98b" prot="private" virt="non-virtual"><scope>basic_json</scope><name>__pad0__</name></member>
      <member refid="classbasic__json_1abcb952da690392e391ce9c4dc41727d9" prot="private" virt="non-virtual"><scope>basic_json</scope><name>__pad1__</name></member>
      <member refid="classbasic__json_1a39b01253ca65e8f5abdc1796d6ee0012" prot="private" virt="non-virtual"><scope>basic_json</scope><name>__pad2__</name></member>
      <member refid="classbasic__json_1a7e8bca0d3d745150dbaae538443bb626" prot="public" virt="non-virtual"><scope>basic_json</scope><name>__pad3__</name></member>
      <member refid="classbasic__json_1aba63131a6c69e3f5121632d496c9b708" prot="public" virt="non-virtual"><scope>basic_json</scope><name>__pad4__</name></member>
      <member refid="classbasic__json_1a485873eed243b6ca7e30c96130a5ec2d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>allocator_type</name></member>
      <member refid="classbasic__json_1a85fdfa4bdeca94ed5b104e621aae29f4" prot="private" virt="non-virtual"><scope>basic_json</scope><name>array</name></member>
      <member refid="classbasic__json_1a08a68350d457af1f6ea7f27b6e0a5baf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>array</name></member>
      <member refid="classbasic__json_1a5d73ada6df46ad0a73cc4b4d1738d73d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>array_t</name></member>
      <member refid="classbasic__json_1adee26a05c7e837cf1b8042de9331484b" prot="private" virt="non-virtual"><scope>basic_json</scope><name>assert_invariant</name></member>
      <member refid="classbasic__json_1a603779687f401ad11de45f8397f92296" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1a98e6b7245d17021327eb3962d73ccc54" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1aedf1894e1b70a4caebd95adec60e845a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1afc69e86b65aa8b571ccad9d581ca5a2b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1afc32b953a4e343dc7f8ab3465743f399" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1aee87279fb115f6d57967e6e8f5542faa" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1a0a5249193b987b187efa74353c9b5b43" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1af1daebc285b407ce97a080a90ead681a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1ac7d4becb69fb528514395b46d123b69a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1aa4a6aa1ba673eda8f96506b8dfc243df" prot="public" virt="non-virtual"><scope>basic_json</scope><name>at</name></member>
      <member refid="classbasic__json_1adafea743a0a74f86433b8b7cc5bb24bf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>back</name></member>
      <member refid="classbasic__json_1a1bf48c36e00720e01f8f6bbd3df0bf5b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>back</name></member>
      <member refid="classbasic__json_1aee75ecbdc67fc5faa1228c949c59ff27" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1ac6f1bad4745ddb574540f71cdbcd532f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1a9b1f9ac7c7ebcff72d00869e974a6249" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1a94560a1edd72d60310c54c9b2d9f1ad2" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1aec3d71dec8062753efb67860b7cca1a1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1ad382c9c9e03c410004150c9d6b9f0bd9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1a12f2c1a11dd6e84196132ea77a99572a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1a33adf04c1d841c42c0eeaf05252aedc3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1ac62e476c88b91f1f4329bb4901cafc4c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1aa269ba998ca2e15b2f596a8c074d125f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>basic_json</name></member>
      <member refid="classbasic__json_1aac9997e46c538d338d4dbbfeb66c9e20" prot="private" virt="non-virtual"><scope>basic_json</scope><name>basic_json_t</name></member>
      <member refid="classbasic__json_1af7ba4755c9131259324caaa166146513" prot="public" virt="non-virtual"><scope>basic_json</scope><name>begin</name></member>
      <member refid="classbasic__json_1aec74bf7ec122115d615a7f1be4122f9f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>begin</name></member>
      <member refid="classbasic__json_1a731dc2210798a3d11d81fa0f6b5600a6" prot="private" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a8d25b7a4a6f6ee355193ee6b461ab3bd" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a9a92f5028b858b39e0c49c722ba09793" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a0767ec4050ecfb4e4852db24cc939b2b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a6ad9ba515c5f51d9c5609583e3d0ada0" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary</name></member>
      <member refid="classbasic__json_1a409ee6f0174dbfeb9af70a9249301364" prot="private" virt="non-virtual"><scope>basic_json</scope><name>binary_reader</name></member>
      <member refid="classbasic__json_1aabedd827d4943302a4cf0413956341db" prot="public" virt="non-virtual"><scope>basic_json</scope><name>binary_t</name></member>
      <member refid="classbasic__json_1a95953befdb9a71334700748ccd2f0cee" prot="private" virt="non-virtual"><scope>basic_json</scope><name>binary_writer</name></member>
      <member refid="classbasic__json_1a82789a596dcaca0c1abe4ee085d8548f" prot="private" virt="non-virtual"><scope>basic_json</scope><name>boolean</name></member>
      <member refid="classbasic__json_1af396ac808d774d4ea0db4c7da11ce569" prot="public" virt="non-virtual"><scope>basic_json</scope><name>boolean_t</name></member>
      <member refid="classbasic__json_1a3451ab7e33828ded865a4c6c2e22463b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>cbegin</name></member>
      <member refid="classbasic__json_1a2373759df24fffb094fd7789c726abe1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>cbor_tag_handler_t</name></member>
      <member refid="classbasic__json_1ab4f83081d8b64f6dc9b079af13266dc1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>cend</name></member>
      <member refid="classbasic__json_1ac5145a99de8435876192b70378afe097" prot="public" virt="non-virtual"><scope>basic_json</scope><name>clear</name></member>
      <member refid="classbasic__json_1a8f3470194c24d964e40d9be0b177cbc3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_iterator</name></member>
      <member refid="classbasic__json_1a28ac2566e6ab084c5c1e044d132aa4a3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_pointer</name></member>
      <member refid="classbasic__json_1ac9d32cf719260c22b33bab670cd5602b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_reference</name></member>
      <member refid="classbasic__json_1a2aa7d4c7719ab82aa8c77a83642c843f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>const_reverse_iterator</name></member>
      <member refid="classbasic__json_1a3815a53b61818c87cf677f4a1ea5b7e8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>contains</name></member>
      <member refid="classbasic__json_1a56dbcc61c27689659fa1d94a19bd2560" prot="public" virt="non-virtual"><scope>basic_json</scope><name>contains</name></member>
      <member refid="classbasic__json_1a0d7241e94ede5aacd7efca401cf0638a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>contains</name></member>
      <member refid="classbasic__json_1a74b0b7791993c4ae48532f9b427bc518" prot="public" virt="non-virtual"><scope>basic_json</scope><name>contains</name></member>
      <member refid="classbasic__json_1ac122e03d4d28d6a03c01abaa7229d4c7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>count</name></member>
      <member refid="classbasic__json_1a06e36a368cbf554fc817b0cb3e37e3a3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>count</name></member>
      <member refid="classbasic__json_1aed4f45b1b03cd315b3700dacb22d1fb3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>crbegin</name></member>
      <member refid="classbasic__json_1a005ee8bc7a25b793688e301ac8287165" prot="private" virt="non-virtual"><scope>basic_json</scope><name>create</name></member>
      <member refid="classbasic__json_1a463e1d370bf75906179dce60ad89a1ea" prot="public" virt="non-virtual"><scope>basic_json</scope><name>crend</name></member>
      <member refid="classbasic__json_1af2fea7b2039e4308b8e8c22a0dd5b570" prot="public" virt="non-virtual"><scope>basic_json</scope><name>default_object_comparator_t</name></member>
      <member refid="classbasic__json_1a02aab01e14ceff4a078019f7bd212ac7" prot="private" virt="non-virtual"><scope>basic_json</scope><name>destroy</name></member>
      <member refid="classbasic__json_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>detail::external_constructor</name></member>
      <member refid="classbasic__json_1aff2204c04cd35b2cef35f44b2b93ffc7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>diff</name></member>
      <member refid="classbasic__json_1a2fe32d636c1b78861884dde9716b22b6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>difference_type</name></member>
      <member refid="classbasic__json_1ac38b5f79c16205efb771e99be206b345" prot="public" virt="non-virtual"><scope>basic_json</scope><name>dump</name></member>
      <member refid="classbasic__json_1a3e70795da670f11ad7925407d0a7d83c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>emplace</name></member>
      <member refid="classbasic__json_1a7ad89dd8715111483428ecf8534b9393" prot="public" virt="non-virtual"><scope>basic_json</scope><name>emplace_back</name></member>
      <member refid="classbasic__json_1aec22254018236106f357bc3ed7c20399" prot="public" virt="non-virtual"><scope>basic_json</scope><name>empty</name></member>
      <member refid="classbasic__json_1a06e303bfaafda414b4b5821384501bc1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>end</name></member>
      <member refid="classbasic__json_1a0409aa6e94198aaedff3f285d3c98e8c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>end</name></member>
      <member refid="classbasic__json_1a7a5ed019983b582705ef5ee43d15ca24" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a151124c5b91ecb1278c7e191053ce9ca" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a8d29d171d8941523a937bb6b5132b5a7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a3054e673f67fa325fbdcd0bf73d03c7b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1a0e480e9d2391485c79747bb756628f61" prot="public" virt="non-virtual"><scope>basic_json</scope><name>erase</name></member>
      <member refid="classbasic__json_1af728c561e10d2f8cfacf678b1da4f29e" prot="private" virt="non-virtual"><scope>basic_json</scope><name>erase_internal</name></member>
      <member refid="classbasic__json_1af728c561e10d2f8cfacf678b1da4f29e" prot="private" virt="non-virtual"><scope>basic_json</scope><name>erase_internal</name></member>
      <member refid="classbasic__json_1abbc0836764d6ba2580ee0c775ceeeab7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>error_handler_t</name></member>
      <member refid="classbasic__json_1ab671bd0e5eef59e58d362e6cd8937633" prot="public" virt="non-virtual"><scope>basic_json</scope><name>exception</name></member>
      <member refid="classbasic__json_1a8ed11f83edce392fd94659b1102d078e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1a8d8085b05e9a2e6f187708bca5e22d04" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1a81e01eb7be2878873ba084c0a0b20442" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1a42890814a18f9c593f69218706113474" prot="public" virt="non-virtual"><scope>basic_json</scope><name>find</name></member>
      <member refid="classbasic__json_1a9331162af6752277de4d1e476bb3f6bb" prot="public" virt="non-virtual"><scope>basic_json</scope><name>flatten</name></member>
      <member refid="classbasic__json_1affeac471308bec4cfe026258f746cfcc" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bjdata</name></member>
      <member refid="classbasic__json_1a94c00d3023a03b37d9a362cdf61c17c1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bjdata</name></member>
      <member refid="classbasic__json_1a5ac8b0effce93dad2e3eec9c1a7ed129" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1a06c87b306915435958b5e584dfb80ce4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1aa5d6a52ae542b7ffd137e87e72f9bcce" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1a868a32e0da318e39872fb825b377bda6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_bson</name></member>
      <member refid="classbasic__json_1a84e2d9cbd8a385017bb3d91c45a1753a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1a93872bc620a9bbe028be81a3eaae21f3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1a0dcdc5f7b4a7ebf4b2a1a21710ad246d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1adff52051e3e569f6f801b2d7b66124b1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_cbor</name></member>
      <member refid="classbasic__json_1a96ba0ffab9429d589d658d3e053b8273" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1a7f3794747f5b19e0504afa3585476e97" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1ac347f43d4eb713aa711d6c8a5fca41cf" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1a2a29d7be59d39991efb3a584cd2e6598" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_msgpack</name></member>
      <member refid="classbasic__json_1a662ee4905d8c2628b3018b378bbd4c9e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1ad36123b583eaae095ee46413e4e380ef" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1a3d5a903e9aad342917fc3e98c070a0d7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1a99be0ee4212c46c20ee32d4a1a90cc6c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>from_ubjson</name></member>
      <member refid="classbasic__json_1aeb6f631d1a7f8f23772434f22a06108e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>front</name></member>
      <member refid="classbasic__json_1a85577855985468abef750d5265e23c2a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>front</name></member>
      <member refid="classbasic__json_1ab11bff397526e8255d151066caeba48e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get</name></member>
      <member refid="classbasic__json_1a35fa19a3f6193409abe4bd9014712105" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get</name></member>
      <member refid="classbasic__json_1a1aaddd9686fb1dd50203c2138858df7e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_allocator</name></member>
      <member refid="classbasic__json_1aa4401911681258520903f3c374a9e994" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_binary</name></member>
      <member refid="classbasic__json_1a44b4244ff0e901156adfad7b027232de" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_binary</name></member>
      <member refid="classbasic__json_1a5c1dbb7957e2224af836fca54b593801" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1ad64c802d7f6170f049012baa4fa41abd" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1a2a8df16f639b0b140885bad6ac7ed980" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1afa8783cbf830c698905fc1b020de2854" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1a2861b13d7657d5819a70f4f2c7922335" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1afa13fcef3893a0a658aacdea073a2174" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl</name></member>
      <member refid="classbasic__json_1a377655ce708e04fc796ca7307cbb0bae" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a445f688fdcfea5febb5b3b3eeda096d0" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a5aaa765a56c67646a8c25052af8e5254" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a2300408cebd418f14af6a9aaab4c97f8" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a3c1f25809afade6c541d7c1043a37ffa" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1ac786fddc620d6bc33680baba5907ab5b" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a1e35fe38856e6aa3a722b24be3e65846" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1aa1de01eeb243f97041bfb6e5b3890474" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a5a2ac6016ca45ad0a125d395dafe852e" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a662e420ed7ec3ffb07f034029e1905da" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1af3b49e9769b754496f229c447ffcd6ff" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1af4455662bb6f37ba1acc4ea645d03dff" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1afc2a176f53df2bb3ac316a20658f47d1" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1ab22c82a09d6d5ff6d637832d43bf84f5" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1ada65706f8ebb5939856054f1aed7af60" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a918c4967f40d26352b93841677c90a93" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classbasic__json_1a206a3748ff1fc676f64f753e203388dd" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ptr</name></member>
      <member refid="classbasic__json_1a2055fcc0c999d3cb4c211f258695faff" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ptr</name></member>
      <member refid="classbasic__json_1a7bfdaa5014da75e18dd07cc76e53b237" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ref</name></member>
      <member refid="classbasic__json_1a42f1f9cf90ed5254e38e6b587fce237d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_ref</name></member>
      <member refid="classbasic__json_1abe9356f177f5d7bd476f6a4158d8a06a" prot="private" virt="non-virtual"><scope>basic_json</scope><name>get_ref_impl</name></member>
      <member refid="classbasic__json_1a251b2b7f275328615aed5a0f827e7710" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_to</name></member>
      <member refid="classbasic__json_1a9e0131c192963ed4d1148805120aa319" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_to</name></member>
      <member refid="classbasic__json_1ac6a78b37dee5a709f610375403597bba" prot="public" virt="non-virtual"><scope>basic_json</scope><name>get_to</name></member>
      <member refid="classbasic__json_1a7c9bb013516e0828fc35a672defdc86e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>initializer_list_t</name></member>
      <member refid="classbasic__json_1a0bcf8e1a03522bf1ea9bb6fb49251dab" prot="public" virt="non-virtual"><scope>basic_json</scope><name>input_format_t</name></member>
      <member refid="classbasic__json_1a4467ec0c7679150140f9d2f85e95bf4b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1a5cd6ab85d95fa08d0fbce5f957834f28" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1a1d7b302f4e6249b8b28dcfbebd934600" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1af30d7fc224999adeaa9e4dcd81db0f05" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1a3b25eeb503c9f30322b966af0451da38" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1a797b7b5589862535c88b9604c88d8d3e" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert</name></member>
      <member refid="classbasic__json_1a6940b08bda32ce195a9e4508b8aa1126" prot="public" virt="non-virtual"><scope>basic_json</scope><name>insert_iterator</name></member>
      <member refid="classbasic__json_1aa172a3d71130fb652f695297cb34491d" prot="private" virt="non-virtual"><scope>basic_json</scope><name>internal_iterator</name></member>
      <member refid="classbasic__json_1a9dbe40f1942d8e38ab2effc7988b05ea" prot="public" virt="non-virtual"><scope>basic_json</scope><name>invalid_iterator</name></member>
      <member refid="classbasic__json_1abe6a2b3e624ac8772519963bcfb8fb56" prot="public" virt="non-virtual"><scope>basic_json</scope><name>inverse</name></member>
      <member refid="classbasic__json_1a89ea48a4e802ef81783c0c7ce89aa7bb" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_array</name></member>
      <member refid="classbasic__json_1aa25e81e71e2a263c0431f02f3245a8aa" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_binary</name></member>
      <member refid="classbasic__json_1a814771ab0add0def16119c157b44003a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_boolean</name></member>
      <member refid="classbasic__json_1aa29b36146debb33f3f7293e92cc8643e" prot="private" virt="non-virtual"><scope>basic_json</scope><name>is_comparable_with_object_key</name></member>
      <member refid="classbasic__json_1abcc7082bb9fa07704c659f6be7c41bc9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_discarded</name></member>
      <member refid="classbasic__json_1a6ed948b2c2e71ce5f5c03b5eeb575df4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_null</name></member>
      <member refid="classbasic__json_1ab84294fe5d1a2822e2f67685f6e8c735" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number</name></member>
      <member refid="classbasic__json_1aa8c885a9182fd22b05826ab2a9548f60" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number_float</name></member>
      <member refid="classbasic__json_1ad14438fe7c1f5a2f750eb56b8e73e538" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number_integer</name></member>
      <member refid="classbasic__json_1aa5744d3f2404f2376ab0dbe531e4d3bc" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_number_unsigned</name></member>
      <member refid="classbasic__json_1af758a912346776b086abb82487b1d73b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_object</name></member>
      <member refid="classbasic__json_1a7fa8bc506b1519193a7bbc09f8a0f095" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_primitive</name></member>
      <member refid="classbasic__json_1a3d4378552d27c9f15e4cb4ff4c075c94" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_string</name></member>
      <member refid="classbasic__json_1aded85ec1014821c21b8a47bc816a6917" prot="public" virt="non-virtual"><scope>basic_json</scope><name>is_structured</name></member>
      <member refid="classbasic__json_1a164b219291271e36e427d6b9c9916fec" prot="public" virt="non-virtual"><scope>basic_json</scope><name>items</name></member>
      <member refid="classbasic__json_1a2b062fb036928f3c4c945c18609ca0ec" prot="public" virt="non-virtual"><scope>basic_json</scope><name>items</name></member>
      <member refid="classbasic__json_1aba0def4a0dbcc3ab08fc802f9acef967" prot="private" virt="non-virtual"><scope>basic_json</scope><name>iter_impl</name></member>
      <member refid="classbasic__json_1a46fc0d1886ed4635b3ff13e40d9c15e0" prot="private" virt="non-virtual"><scope>basic_json</scope><name>iteration_proxy</name></member>
      <member refid="classbasic__json_1a2935c91b82c8e586b1dd68ad665075a6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>iterator</name></member>
      <member refid="classbasic__json_1a091a63384590fe2cf7a122155b30011a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>iterator_wrapper</name></member>
      <member refid="classbasic__json_1af373ec8f75f254b79fe1b1ca776797b9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>iterator_wrapper</name></member>
      <member refid="classbasic__json_1a7c7e3533ab09b9e9d24a516379961a93" prot="public" virt="non-virtual"><scope>basic_json</scope><name>json_pointer</name></member>
      <member refid="classbasic__json_1a38142568f1a74d291c3442a70f6a2d2a" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_reverse_iterator</name></member>
      <member refid="classbasic__json_1a0c291e7719ceccef199189e5ee4ecd4f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>json_sax_t</name></member>
      <member refid="classbasic__json_1a5e8738738b9e5c4cdc6519e3799de38a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>json_serializer</name></member>
      <member refid="classbasic__json_1a81c0a3d40f098944971b954cbf417671" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a1af76023f007d485a9a7b857ca837731" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1aba6aa773dbdfd5d189c00f600e963a35" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1aea3c1a165faa64cca1a42beab5a81f98" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1ad2f07eb9707781c293cfffe58e146401" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a82b673260a265e8ecef44ceee9a466a3" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a87e923794044b65f2c25eeee51da11cb" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1af4aa63ba141fd81c1678c0534eb50548" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a3dab4b04d91104ace89951b989b6ffc4" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1abd0f76bc289915a78bad58f46773cfe9" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1ab2dd58dcd8dfa835ed75474e19b860f8" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a814c8103c4e8bf15b2392f0841b86243" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1ae910b1e18799654f9591ac3094023e59" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a024d6ab3e25fe8b0b17f83c675989b19" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a1622e79c503e4eb25b34196b4d439832" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1ab344e491e4c254162bfaf87bf49ae0e3" prot="private" virt="non-virtual"><scope>basic_json</scope><name>json_value</name></member>
      <member refid="classbasic__json_1a34bc6074bd3f9ac2bdab12ebc02d70f5" prot="public" virt="non-virtual"><scope>basic_json</scope><name>m_value</name></member>
      <member refid="classbasic__json_1a6d46cece4c9f4700e4d6ac9565bde067" prot="public" virt="non-virtual"><scope>basic_json</scope><name>max_size</name></member>
      <member refid="classbasic__json_1a1c7ab88eb6d043b434cd9e0b68ec7321" prot="public" virt="non-virtual"><scope>basic_json</scope><name>merge_patch</name></member>
      <member refid="classbasic__json_1a08303da85f75965764bb0c8d8b79a449" prot="public" virt="non-virtual"><scope>basic_json</scope><name>meta</name></member>
      <member refid="classbasic__json_1a1a16d7dd42628594ff0f8be9a3ffdddb" prot="private" virt="non-virtual"><scope>basic_json</scope><name>number_float</name></member>
      <member refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>number_float_t</name></member>
      <member refid="classbasic__json_1a715bb7e41d34cffd430ce70750d18afa" prot="private" virt="non-virtual"><scope>basic_json</scope><name>number_integer</name></member>
      <member refid="classbasic__json_1a8b702448867b892700c768db4208a670" prot="public" virt="non-virtual"><scope>basic_json</scope><name>number_integer_t</name></member>
      <member refid="classbasic__json_1a3851a3c991ee19ecb7e8ac4e902554e4" prot="private" virt="non-virtual"><scope>basic_json</scope><name>number_unsigned</name></member>
      <member refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" prot="public" virt="non-virtual"><scope>basic_json</scope><name>number_unsigned_t</name></member>
      <member refid="classbasic__json_1a10aa3ec9e58f6852709913408519c01c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>object</name></member>
      <member refid="classbasic__json_1a7866de66dd6c55590efa7cf0ef79e74f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>object_comparator_t</name></member>
      <member refid="classbasic__json_1a26b474ab8829fc66cc799a145d8f029f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>object_t</name></member>
      <member refid="classbasic__json_1ab025e8b5ac852c84758f92183b569b99" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator value_t</name></member>
      <member refid="classbasic__json_1a31ccb49215a3dcac15438fb94485e86f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator ValueType</name></member>
      <member refid="classbasic__json_1a042aa42f535d1dbf2176d159fd3d96eb" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1afbbf3e602301f1b9fc81c445c8f3bd1a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1a024a7d334069a60f8cb95c3f858fc9e6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1ae3350669b0628bf54a4771512a55f135" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator+=</name></member>
      <member refid="classbasic__json_1af9907af448f7ff794120033e132025f6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator&lt;&lt;</name></member>
      <member refid="classbasic__json_1a8cb70d0ea0c23ac40f1f3b67d40c174f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator=</name></member>
      <member refid="classbasic__json_1aea0de29387d532e0bc5f2475cb83995d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator&gt;&gt;</name></member>
      <member refid="classbasic__json_1aa3dfeae16fa9a8ec1390a27d6a4a58b3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a61677841384622af7c3174f3f10df621" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a272177c4eb206c70f41e35146915b710" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1af57b78559cad28275bc515bb2a072605" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1abb748eeb63f40f12f81f9e9c5d53d127" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a19e43d3f7092719836ac3e8249044bb6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a5a7e1bd642902ec90f118f00d48c024d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1afb04aaee2ee66a6c822aaad827123314" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a2f0b9af87d5c9c8bed6dc0e165af3147" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a6ca526e935364213525dd8e23397472c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a9ba36b6659d266fd0299446a20b611d9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1a8ed2a2a59c3437b4b57e4f0b03e4333a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>operator[]</name></member>
      <member refid="classbasic__json_1aab2ef54e2baf390523dd6a5bc4ccccef" prot="public" virt="non-virtual"><scope>basic_json</scope><name>other_error</name></member>
      <member refid="classbasic__json_1a144d3cb5914a0a12c2f5d2b982a2214a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>out_of_range</name></member>
      <member refid="classbasic__json_1a11e46bddc70377800c1a754780f28507" prot="private" virt="non-virtual"><scope>basic_json</scope><name>output_adapter_t</name></member>
      <member refid="classbasic__json_1ab0da064d46469bb762afcecd1c361f1a" prot="public" virt="non-virtual"><scope>basic_json</scope><name>parse_error</name></member>
      <member refid="classbasic__json_1adfe811a234bbc90f4a0d3c6488272186" prot="public" virt="non-virtual"><scope>basic_json</scope><name>parse_event_t</name></member>
      <member refid="classbasic__json_1a639b07cc44c1088baff926e2187ac35b" prot="private" virt="non-virtual"><scope>basic_json</scope><name>parser</name></member>
      <member refid="classbasic__json_1a144c201819ed5c9d9f58b59eb64fb454" prot="public" virt="non-virtual"><scope>basic_json</scope><name>parser_callback_t</name></member>
      <member refid="classbasic__json_1a5a009b55b9dcdb30352f5f62537931b7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>patch</name></member>
      <member refid="classbasic__json_1adc2ae40925906c7e1d559b8bf12028a7" prot="public" virt="non-virtual"><scope>basic_json</scope><name>patch_inplace</name></member>
      <member refid="classbasic__json_1ac02a5d1bf4e9cd1bdec90e97f4ea6f95" prot="public" virt="non-virtual"><scope>basic_json</scope><name>pointer</name></member>
      <member refid="classbasic__json_1afef078ae0e400601f9c2f54f247b9d1b" prot="private" virt="non-virtual"><scope>basic_json</scope><name>primitive_iterator_t</name></member>
      <member refid="classbasic__json_1ae9dd9991cbc1c10d35987680038f6359" prot="public" virt="non-virtual"><scope>basic_json</scope><name>push_back</name></member>
      <member refid="classbasic__json_1a102e459f1d163cea963ed6fdda595cd3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>push_back</name></member>
      <member refid="classbasic__json_1a4efb88d640b634b77af5825321e6c4ba" prot="public" virt="non-virtual"><scope>basic_json</scope><name>push_back</name></member>
      <member refid="classbasic__json_1adabd8c4eea861419dc2629610a922e97" prot="public" virt="non-virtual"><scope>basic_json</scope><name>push_back</name></member>
      <member refid="classbasic__json_1ac8c2b82d885e4765ad078f475c777320" prot="public" virt="non-virtual"><scope>basic_json</scope><name>rbegin</name></member>
      <member refid="classbasic__json_1a9eb8bf73439e55c11983f51de32614b5" prot="public" virt="non-virtual"><scope>basic_json</scope><name>rbegin</name></member>
      <member refid="classbasic__json_1aa95f366d506aca733799e4c310927b5d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>reference</name></member>
      <member refid="classbasic__json_1aaf8366e38224d6bb07c9ef7b21d96553" prot="public" virt="non-virtual"><scope>basic_json</scope><name>rend</name></member>
      <member refid="classbasic__json_1aeeda19c8edb0398ba1c04575b077391d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>rend</name></member>
      <member refid="classbasic__json_1ac639cd1b4238d158286e7e21b5829709" prot="public" virt="non-virtual"><scope>basic_json</scope><name>reverse_iterator</name></member>
      <member refid="classbasic__json_1ac83f2e1cec130719f862008b9e16acee" prot="public" virt="non-virtual"><scope>basic_json</scope><name>rhs</name></member>
      <member refid="classbasic__json_1a2eae76ffa6335685fa38190a18806d55" prot="public" virt="non-virtual"><scope>basic_json</scope><name>sax_parse</name></member>
      <member refid="classbasic__json_1a4e2094d16fe8fd49c20eca61fa88d602" prot="public" virt="non-virtual"><scope>basic_json</scope><name>sax_parse</name></member>
      <member refid="classbasic__json_1a696ab4a7073c479bb1ef24c23c3d3d67" prot="public" virt="non-virtual"><scope>basic_json</scope><name>sax_parse</name></member>
      <member refid="classbasic__json_1ae19ce7ef03dbaab05e8b38941800bef0" prot="private" virt="non-virtual"><scope>basic_json</scope><name>set_parent</name></member>
      <member refid="classbasic__json_1a09f896094c3329506b31e40207cc9d2f" prot="private" virt="non-virtual"><scope>basic_json</scope><name>set_parents</name></member>
      <member refid="classbasic__json_1ac89414a26a04db88499c4b17d065e0c2" prot="private" virt="non-virtual"><scope>basic_json</scope><name>set_parents</name></member>
      <member refid="classbasic__json_1a769537e4631ccd39b5ab3753547a8274" prot="public" virt="non-virtual"><scope>basic_json</scope><name>size</name></member>
      <member refid="classbasic__json_1a883ac4726a370dbf98474944ec0a0acc" prot="public" virt="non-virtual"><scope>basic_json</scope><name>size_type</name></member>
      <member refid="classbasic__json_1a51ff696f79f93c34b06cfad8dae08791" prot="private" virt="non-virtual"><scope>basic_json</scope><name>string</name></member>
      <member refid="classbasic__json_1a807932caebf0d62abc8642b9d1a2e5ef" prot="public" virt="non-virtual"><scope>basic_json</scope><name>string_t</name></member>
      <member refid="classbasic__json_1a57541a1c736f6ea94fe4a92dd61b3c37" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1aee0ae36cbfb0336832ebc0374c3c7679" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1af1bc171c2ec496dcc63c9035354d1138" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1a2061fc20992f76b6fe4a7d2456391b8f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1aa914de665383b10bdd6265e6b63b8d93" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1a23296c72c9f837e20cfdc28d8018dd57" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1a636ae0a887a94436f43f26c94aa1f748" prot="public" virt="non-virtual"><scope>basic_json</scope><name>swap</name></member>
      <member refid="classbasic__json_1a2b222d92f075b0033a76a60ccb36269c" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bjdata</name></member>
      <member refid="classbasic__json_1a9b4a7117f98423b6d92e48951a7e3c55" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bjdata</name></member>
      <member refid="classbasic__json_1a9c66ff3a69ef4e4d0d1c136d4226c6af" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bjdata</name></member>
      <member refid="classbasic__json_1a85f418313f92075a0ab72060bfe4de06" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bson</name></member>
      <member refid="classbasic__json_1ad5ff725ab08638fbc83ed7e3c7c41396" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bson</name></member>
      <member refid="classbasic__json_1a62bb643538ab0e016a2f319e22bf4c4d" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_bson</name></member>
      <member refid="classbasic__json_1a12a270a8c98f23f838837562ddde18a8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_cbor</name></member>
      <member refid="classbasic__json_1a91e6116b577c4a402d0bf59ceb1ce3b6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_cbor</name></member>
      <member refid="classbasic__json_1a4b49f22c2c0ed2c803c695f328ee5f4f" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_cbor</name></member>
      <member refid="classbasic__json_1a4d510f5c39b036deb96e61c8bef19f31" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_msgpack</name></member>
      <member refid="classbasic__json_1ad91a270a87e6aec97c18d44aaddf0d33" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_msgpack</name></member>
      <member refid="classbasic__json_1a7e3ec809212107cb5809c386c5e3dce3" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_msgpack</name></member>
      <member refid="classbasic__json_1a74a0e7569fb3170e0151e4aca3f4bf3b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_ubjson</name></member>
      <member refid="classbasic__json_1ad7567f6b4b51d3bc1cbe6a80cd6ca9a8" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_ubjson</name></member>
      <member refid="classbasic__json_1a81aecae4901eb995b22ee6abccf94122" prot="public" virt="non-virtual"><scope>basic_json</scope><name>to_ubjson</name></member>
      <member refid="classbasic__json_1a1338e4eef7282cd57a4a57e034531029" prot="public" virt="non-virtual"><scope>basic_json</scope><name>type</name></member>
      <member refid="classbasic__json_1a14db56e21a2c72186979c6f6f0469557" prot="public" virt="non-virtual"><scope>basic_json</scope><name>type_error</name></member>
      <member refid="classbasic__json_1a7528ae3cfe082b3e6280eb5dfab4700b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>type_name</name></member>
      <member refid="classbasic__json_1a91ef6a13e3205323b67700c3e5e672c9" prot="public" virt="non-virtual"><scope>basic_json</scope><name>unflatten</name></member>
      <member refid="classbasic__json_1aa1c13ddcc1eb615dc56ebd7cb44791bd" prot="public" virt="non-virtual"><scope>basic_json</scope><name>update</name></member>
      <member refid="classbasic__json_1a2db7c9bf454f893d156a7396d527873b" prot="public" virt="non-virtual"><scope>basic_json</scope><name>update</name></member>
      <member refid="classbasic__json_1a3fb507ac4a659d45a9ccdfb67a0646ec" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a1460a0f28bedca9050f2259ec6bf86e6" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a58469bce489ece80e50e7ed59fa09484" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1ac7d24993dea7dcd5442465e43b0554cb" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a8e07f0a0e66b05e7b77b95f623cbfac1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1af435aab4d160572776d7e66c3809e4b1" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1a6c7141baa06e635fe37736659a9f1631" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1aa5ea0e7032d5697076d3f2faf318af18" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value</name></member>
      <member refid="classbasic__json_1af3878424116e745314658d0a921c6321" prot="private" virt="non-virtual"><scope>basic_json</scope><name>value_return_type</name></member>
      <member refid="classbasic__json_1aea7fcb38964d53d35e84a80b8b1e8d11" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value_t</name></member>
      <member refid="classbasic__json_1ad9e6b75c7cc0db798b91e52edca5f4ca" prot="public" virt="non-virtual"><scope>basic_json</scope><name>value_type</name></member>
      <member refid="classbasic__json_1ad0209408ec1ed66ea5f89a7d72e57e43" prot="public" virt="non-virtual"><scope>basic_json</scope><name>~basic_json</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
