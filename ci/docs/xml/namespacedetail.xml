<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespacedetail" kind="namespace" language="C++">
    <compoundname>detail</compoundname>
    <innerclass refid="structdetail_1_1actual__object__comparator" prot="public">detail::actual_object_comparator</innerclass>
    <innerclass refid="classdetail_1_1binary__reader" prot="public">detail::binary_reader</innerclass>
    <innerclass refid="classdetail_1_1binary__writer" prot="public">detail::binary_writer</innerclass>
    <innerclass refid="structdetail_1_1conjunction" prot="public">detail::conjunction</innerclass>
    <innerclass refid="structdetail_1_1conjunction_3_01_b_01_4" prot="public">detail::conjunction&lt; B &gt;</innerclass>
    <innerclass refid="structdetail_1_1conjunction_3_01_b_00_01_bn_8_8_8_01_4" prot="public">detail::conjunction&lt; B, Bn... &gt;</innerclass>
    <innerclass refid="structdetail_1_1detector" prot="public">detail::detector</innerclass>
    <innerclass refid="structdetail_1_1detector_3_01_default_00_01void__t_3_01_op_3_01_args_8_8_8_01_4_01_4_00_01_op_00_01_args_8_8_8_01_4" prot="public">detail::detector&lt; Default, void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</innerclass>
    <innerclass refid="classdetail_1_1exception" prot="public">detail::exception</innerclass>
    <innerclass refid="structdetail_1_1external__constructor" prot="public">detail::external_constructor</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1array_01_4" prot="public">detail::external_constructor&lt; value_t::array &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1binary_01_4" prot="public">detail::external_constructor&lt; value_t::binary &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1boolean_01_4" prot="public">detail::external_constructor&lt; value_t::boolean &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1number__float_01_4" prot="public">detail::external_constructor&lt; value_t::number_float &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1number__integer_01_4" prot="public">detail::external_constructor&lt; value_t::number_integer &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1number__unsigned_01_4" prot="public">detail::external_constructor&lt; value_t::number_unsigned &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1object_01_4" prot="public">detail::external_constructor&lt; value_t::object &gt;</innerclass>
    <innerclass refid="structdetail_1_1external__constructor_3_01value__t_1_1string_01_4" prot="public">detail::external_constructor&lt; value_t::string &gt;</innerclass>
    <innerclass refid="classdetail_1_1file__input__adapter" prot="public">detail::file_input_adapter</innerclass>
    <innerclass refid="structdetail_1_1from__json__fn" prot="public">detail::from_json_fn</innerclass>
    <innerclass refid="structdetail_1_1has__from__json" prot="public">detail::has_from_json</innerclass>
    <innerclass refid="structdetail_1_1has__from__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01_9is__basic_fce8b8f93d45fb838eee91b696633019" prot="public">detail::has_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__key__compare" prot="public">detail::has_key_compare</innerclass>
    <innerclass refid="structdetail_1_1has__non__default__from__json" prot="public">detail::has_non_default_from_json</innerclass>
    <innerclass refid="structdetail_1_1has__non__default__from__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_2d17f33a54f009ebd0a99d19cdccdb1f" prot="public">detail::has_non_default_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__to__json" prot="public">detail::has_to_json</innerclass>
    <innerclass refid="structdetail_1_1has__to__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01_9is__basic__j28a68f7ad118503a2d1e9663db2d9323" prot="public">detail::has_to_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1identity__tag" prot="public">detail::identity_tag</innerclass>
    <innerclass refid="classdetail_1_1input__stream__adapter" prot="public">detail::input_stream_adapter</innerclass>
    <innerclass refid="structdetail_1_1integer__sequence" prot="public">detail::integer_sequence</innerclass>
    <innerclass refid="structdetail_1_1internal__iterator" prot="public">detail::internal_iterator</innerclass>
    <innerclass refid="classdetail_1_1invalid__iterator" prot="public">detail::invalid_iterator</innerclass>
    <innerclass refid="structdetail_1_1is__basic__json" prot="public">detail::is_basic_json</innerclass>
    <innerclass refid="structdetail_1_1is__basic__json_3_01_n_l_o_h_m_a_n_n___b_a_s_i_c___j_s_o_n___t_p_l_01_4" prot="public">detail::is_basic_json&lt; NLOHMANN_BASIC_JSON_TPL &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__basic__json__context" prot="public">detail::is_basic_json_context</innerclass>
    <innerclass refid="structdetail_1_1is__c__string" prot="public">detail::is_c_string</innerclass>
    <innerclass refid="structdetail_1_1is__comparable" prot="public">detail::is_comparable</innerclass>
    <innerclass refid="structdetail_1_1is__comparable_3_01_compare_00_01_a_00_01_b_00_01void__t_3_01decltype_07std_1_1d1335caac8ed6d774dd842c8360097f7d" prot="public">detail::is_comparable&lt; Compare, A, B, void_t&lt; decltype(std::declval&lt; Compare &gt;()(std::declval&lt; A &gt;(), std::declval&lt; B &gt;())), decltype(std::declval&lt; Compare &gt;()(std::declval&lt; B &gt;(), std::declval&lt; A &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__array__type" prot="public">detail::is_compatible_array_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__array__type__impl" prot="public">detail::is_compatible_array_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__array__type__impl_3_01_basic_json_type_00_01_compatible_array_ty5a05c25fff6f823ac88824a10a386dcf" prot="public">detail::is_compatible_array_type_impl&lt; BasicJsonType, CompatibleArrayType, enable_if_t&lt; is_detected&lt; iterator_t, CompatibleArrayType &gt;::value &amp;&amp;is_iterator_traits&lt; iterator_traits&lt; detected_t&lt; iterator_t, CompatibleArrayType &gt; &gt; &gt;::value &amp;&amp;!std::is_same&lt; CompatibleArrayType, detected_t&lt; range_value_t, CompatibleArrayType &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__integer__type" prot="public">detail::is_compatible_integer_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__integer__type__impl" prot="public">detail::is_compatible_integer_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_compatible_numb0041c726545da1e9f9d50a47e3f940c2" prot="public">detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__object__type" prot="public">detail::is_compatible_object_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__object__type__impl" prot="public">detail::is_compatible_object_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__object__type__impl_3_01_basic_json_type_00_01_compatible_object_c9788cfc69b1e1eda6ea05aee660649a" prot="public">detail::is_compatible_object_type_impl&lt; BasicJsonType, CompatibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, CompatibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, CompatibleObjectType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__string__type" prot="public">detail::is_compatible_string_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__type" prot="public">detail::is_compatible_type</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__type__impl" prot="public">detail::is_compatible_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__compatible__type__impl_3_01_basic_json_type_00_01_compatible_type_00_01enablc5e6eb56f10e073702c6c152991f15b9" prot="public">detail::is_compatible_type_impl&lt; BasicJsonType, CompatibleType, enable_if_t&lt; is_complete_type&lt; CompatibleType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__complete__type" prot="public">detail::is_complete_type</innerclass>
    <innerclass refid="structdetail_1_1is__complete__type_3_01_t_00_01decltype_07void_07sizeof_07_t_08_08_08_4" prot="public">detail::is_complete_type&lt; T, decltype(void(sizeof(T)))&gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible" prot="public">detail::is_constructible</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01const_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">detail::is_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01const_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">detail::is_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">detail::is_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">detail::is_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type" prot="public">detail::is_constructible_array_type</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type__impl" prot="public">detail::is_constructible_array_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_constructible_ar54e545c8083fe861c90a40ff938a22b7" prot="public">detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; !std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &amp;&amp;!is_compatible_string_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;is_default_constructible&lt; ConstructibleArrayType &gt;::value &amp;&amp;(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value||std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value)&amp;&amp;is_detected&lt; iterator_t, ConstructibleArrayType &gt;::value &amp;&amp;is_iterator_traits&lt; iterator_traits&lt; detected_t&lt; iterator_t, ConstructibleArrayType &gt; &gt; &gt;::value &amp;&amp;is_detected&lt; range_value_t, ConstructibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; ConstructibleArrayType, detected_t&lt; range_value_t, ConstructibleArrayType &gt; &gt;::value &amp;&amp;is_complete_type&lt; detected_t&lt; range_value_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_constructible_ar18eb1802aca5c2f462bc2d940e11156a" prot="public">detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__object__type" prot="public">detail::is_constructible_object_type</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__object__type__impl" prot="public">detail::is_constructible_object_type_impl</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__object__type__impl_3_01_basic_json_type_00_01_constructible_oe3af2486927b63ecadb7a7d2ea385f2a" prot="public">detail::is_constructible_object_type_impl&lt; BasicJsonType, ConstructibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, ConstructibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, ConstructibleObjectType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__string__type" prot="public">detail::is_constructible_string_type</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__tuple" prot="public">detail::is_constructible_tuple</innerclass>
    <innerclass refid="structdetail_1_1is__constructible__tuple_3_01_t1_00_01std_1_1tuple_3_01_args_8_8_8_01_4_01_4" prot="public">detail::is_constructible_tuple&lt; T1, std::tuple&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible" prot="public">detail::is_default_constructible</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01const_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">detail::is_default_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01const_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">detail::is_default_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">detail::is_default_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__default__constructible_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">detail::is_default_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__detected__lazy" prot="public">detail::is_detected_lazy</innerclass>
    <innerclass refid="structdetail_1_1is__getable" prot="public">detail::is_getable</innerclass>
    <innerclass refid="structdetail_1_1is__iterator__of__multibyte" prot="public">detail::is_iterator_of_multibyte</innerclass>
    <innerclass refid="structdetail_1_1is__iterator__traits" prot="public">detail::is_iterator_traits</innerclass>
    <innerclass refid="structdetail_1_1is__iterator__traits_3_01iterator__traits_3_01_t_01_4_01_4" prot="public">detail::is_iterator_traits&lt; iterator_traits&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__json__iterator__of" prot="public">detail::is_json_iterator_of</innerclass>
    <innerclass refid="structdetail_1_1is__json__iterator__of_3_01_basic_json_type_00_01typename_01_basic_json_type_1_1const__iterator_01_4" prot="public">detail::is_json_iterator_of&lt; BasicJsonType, typename BasicJsonType::const_iterator &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__json__iterator__of_3_01_basic_json_type_00_01typename_01_basic_json_type_1_1iterator_01_4" prot="public">detail::is_json_iterator_of&lt; BasicJsonType, typename BasicJsonType::iterator &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__json__ref" prot="public">detail::is_json_ref</innerclass>
    <innerclass refid="structdetail_1_1is__json__ref_3_01json__ref_3_01_t_01_4_01_4" prot="public">detail::is_json_ref&lt; json_ref&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__ordered__map" prot="public">detail::is_ordered_map</innerclass>
    <innerclass refid="structdetail_1_1is__range" prot="public">detail::is_range</innerclass>
    <innerclass refid="structdetail_1_1is__sax" prot="public">detail::is_sax</innerclass>
    <innerclass refid="structdetail_1_1is__sax__static__asserts" prot="public">detail::is_sax_static_asserts</innerclass>
    <innerclass refid="structdetail_1_1is__specialization__of" prot="public">detail::is_specialization_of</innerclass>
    <innerclass refid="structdetail_1_1is__specialization__of_3_01_primary_00_01_primary_3_01_args_8_8_8_01_4_01_4" prot="public">detail::is_specialization_of&lt; Primary, Primary&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__transparent" prot="public">detail::is_transparent</innerclass>
    <innerclass refid="classdetail_1_1iter__impl" prot="public">detail::iter_impl</innerclass>
    <innerclass refid="classdetail_1_1iteration__proxy" prot="public">detail::iteration_proxy</innerclass>
    <innerclass refid="classdetail_1_1iteration__proxy__value" prot="public">detail::iteration_proxy_value</innerclass>
    <innerclass refid="classdetail_1_1iterator__input__adapter" prot="public">detail::iterator_input_adapter</innerclass>
    <innerclass refid="structdetail_1_1iterator__input__adapter__factory" prot="public">detail::iterator_input_adapter_factory</innerclass>
    <innerclass refid="structdetail_1_1iterator__input__adapter__factory_3_01_iterator_type_00_01enable__if__t_3_01is__5cecb9bc5a87721b11b4762b91835d89" prot="public">detail::iterator_input_adapter_factory&lt; IteratorType, enable_if_t&lt; is_iterator_of_multibyte&lt; IteratorType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1iterator__traits" prot="public">detail::iterator_traits</innerclass>
    <innerclass refid="structdetail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__object_3_01_t_01_4_1_1value_01_4_01_4" prot="public">detail::iterator_traits&lt; T *, enable_if_t&lt; std::is_object&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1iterator__traits_3_01_t_00_01enable__if__t_3_01_9std_1_1is__pointer_3_01_t_01_4_1_1value_01_4_01_4" prot="public">detail::iterator_traits&lt; T, enable_if_t&lt; !std::is_pointer&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1iterator__types" prot="public">detail::iterator_types</innerclass>
    <innerclass refid="structdetail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1difference__type_00_064dac4a14931e9e3b7bc8e1311de4a39" prot="public">detail::iterator_types&lt; It, void_t&lt; typename It::difference_type, typename It::value_type, typename It::pointer, typename It::reference, typename It::iterator_category &gt; &gt;</innerclass>
    <innerclass refid="classdetail_1_1json__ref" prot="public">detail::json_ref</innerclass>
    <innerclass refid="classdetail_1_1json__reverse__iterator" prot="public">detail::json_reverse_iterator</innerclass>
    <innerclass refid="classdetail_1_1json__sax__acceptor" prot="public">detail::json_sax_acceptor</innerclass>
    <innerclass refid="classdetail_1_1json__sax__dom__callback__parser" prot="public">detail::json_sax_dom_callback_parser</innerclass>
    <innerclass refid="classdetail_1_1json__sax__dom__parser" prot="public">detail::json_sax_dom_parser</innerclass>
    <innerclass refid="classdetail_1_1lexer" prot="public">detail::lexer</innerclass>
    <innerclass refid="classdetail_1_1lexer__base" prot="public">detail::lexer_base</innerclass>
    <innerclass refid="structdetail_1_1make__void" prot="public">detail::make_void</innerclass>
    <innerclass refid="structdetail_1_1negation" prot="public">detail::negation</innerclass>
    <innerclass refid="structdetail_1_1nonesuch" prot="public">detail::nonesuch</innerclass>
    <innerclass refid="classdetail_1_1other__error" prot="public">detail::other_error</innerclass>
    <innerclass refid="classdetail_1_1out__of__range" prot="public">detail::out_of_range</innerclass>
    <innerclass refid="classdetail_1_1output__adapter" prot="public">detail::output_adapter</innerclass>
    <innerclass refid="structdetail_1_1output__adapter__protocol" prot="public">detail::output_adapter_protocol</innerclass>
    <innerclass refid="classdetail_1_1output__stream__adapter" prot="public">detail::output_stream_adapter</innerclass>
    <innerclass refid="classdetail_1_1output__string__adapter" prot="public">detail::output_string_adapter</innerclass>
    <innerclass refid="classdetail_1_1output__vector__adapter" prot="public">detail::output_vector_adapter</innerclass>
    <innerclass refid="classdetail_1_1parse__error" prot="public">detail::parse_error</innerclass>
    <innerclass refid="classdetail_1_1parser" prot="public">detail::parser</innerclass>
    <innerclass refid="structdetail_1_1position__t" prot="public">detail::position_t</innerclass>
    <innerclass refid="classdetail_1_1primitive__iterator__t" prot="public">detail::primitive_iterator_t</innerclass>
    <innerclass refid="structdetail_1_1priority__tag" prot="public">detail::priority_tag</innerclass>
    <innerclass refid="structdetail_1_1priority__tag_3_010_01_4" prot="public">detail::priority_tag&lt; 0 &gt;</innerclass>
    <innerclass refid="classdetail_1_1serializer" prot="public">detail::serializer</innerclass>
    <innerclass refid="classdetail_1_1span__input__adapter" prot="public">detail::span_input_adapter</innerclass>
    <innerclass refid="structdetail_1_1static__const" prot="public">detail::static_const</innerclass>
    <innerclass refid="structdetail_1_1to__json__fn" prot="public">detail::to_json_fn</innerclass>
    <innerclass refid="classdetail_1_1type__error" prot="public">detail::type_error</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl1" prot="public">detail::value_in_range_of_impl1</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl1_3_01_of_type_00_01_t_00_01false_01_4" prot="public">detail::value_in_range_of_impl1&lt; OfType, T, false &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl1_3_01_of_type_00_01_t_00_01true_01_4" prot="public">detail::value_in_range_of_impl1&lt; OfType, T, true &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2" prot="public">detail::value_in_range_of_impl2</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01_of_type_00_01_t_00_01false_00_01false_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, false, false &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01_of_type_00_01_t_00_01false_00_01true_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, false, true &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01_of_type_00_01_t_00_01true_00_01false_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, true, false &gt;</innerclass>
    <innerclass refid="structdetail_1_1value__in__range__of__impl2_3_01_of_type_00_01_t_00_01true_00_01true_01_4" prot="public">detail::value_in_range_of_impl2&lt; OfType, T, true, true &gt;</innerclass>
    <innerclass refid="classdetail_1_1wide__string__input__adapter" prot="public">detail::wide_string_input_adapter</innerclass>
    <innerclass refid="structdetail_1_1wide__string__input__helper" prot="public">detail::wide_string_input_helper</innerclass>
    <innerclass refid="structdetail_1_1wide__string__input__helper_3_01_base_input_adapter_00_012_01_4" prot="public">detail::wide_string_input_helper&lt; BaseInputAdapter, 2 &gt;</innerclass>
    <innerclass refid="structdetail_1_1wide__string__input__helper_3_01_base_input_adapter_00_014_01_4" prot="public">detail::wide_string_input_helper&lt; BaseInputAdapter, 4 &gt;</innerclass>
    <innernamespace refid="namespacedetail_1_1container__input__adapter__factory__impl">detail::container_input_adapter_factory_impl</innernamespace>
    <innernamespace refid="namespacedetail_1_1dtoa__impl">detail::dtoa_impl</innernamespace>
    <innernamespace refid="namespacedetail_1_1impl">detail::impl</innernamespace>
    <innernamespace refid="namespacedetail_1_1utility__internal">detail::utility_internal</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>value_t</name>
        <qualifiedname>detail::value_t</qualifiedname>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a37a6259cc0c1dae299a7866489dff0bd" prot="public">
          <name>null</name>
          <briefdescription>
<para>null value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632aa8cfde6331bd59eb2ac96f8911c4b666" prot="public">
          <name>object</name>
          <briefdescription>
<para>object (unordered set of name/value pairs) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632af1f713c9e000f5d3f280adbd124df4f5" prot="public">
          <name>array</name>
          <briefdescription>
<para>array (ordered collection of values) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632ab45cffe084dd3d20d928bee85e7b0f21" prot="public">
          <name>string</name>
          <briefdescription>
<para>string value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a84e2c64f38f78ba3ea5c905ab5a2da27" prot="public">
          <name>boolean</name>
          <briefdescription>
<para>boolean value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a5763da164f8659d94a56e29df64b4bcc" prot="public">
          <name>number_integer</name>
          <briefdescription>
<para>number value (signed integer) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632adce7cc8ec29055c4158828921f2f265e" prot="public">
          <name>number_unsigned</name>
          <briefdescription>
<para>number value (unsigned integer) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632ad9966ecb59667235a57b4b999a649eef" prot="public">
          <name>number_float</name>
          <briefdescription>
<para>number value (floating-point) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a9d7183f16acce70658f686ae7f1a4d20" prot="public">
          <name>binary</name>
          <briefdescription>
<para>binary array (ordered collection of bytes) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a94708897ec9db8647dfe695714c98e46" prot="public">
          <name>discarded</name>
          <briefdescription>
<para>discarded by the parser callback function </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the JSON type enumeration </para>
        </briefdescription>
        <detaileddescription>
<para>This enumeration collects the different JSON types. It is internally used to distinguish the stored values, and the functions <ref refid="classbasic__json_1a6ed948b2c2e71ce5f5c03b5eeb575df4" kindref="member">basic_json::is_null()</ref>, <ref refid="classbasic__json_1af758a912346776b086abb82487b1d73b" kindref="member">basic_json::is_object()</ref>, <ref refid="classbasic__json_1a89ea48a4e802ef81783c0c7ce89aa7bb" kindref="member">basic_json::is_array()</ref>, <ref refid="classbasic__json_1a3d4378552d27c9f15e4cb4ff4c075c94" kindref="member">basic_json::is_string()</ref>, <ref refid="classbasic__json_1a814771ab0add0def16119c157b44003a" kindref="member">basic_json::is_boolean()</ref>, <ref refid="classbasic__json_1ab84294fe5d1a2822e2f67685f6e8c735" kindref="member">basic_json::is_number()</ref> (with <ref refid="classbasic__json_1ad14438fe7c1f5a2f750eb56b8e73e538" kindref="member">basic_json::is_number_integer()</ref>, <ref refid="classbasic__json_1aa5744d3f2404f2376ab0dbe531e4d3bc" kindref="member">basic_json::is_number_unsigned()</ref>, and <ref refid="classbasic__json_1aa8c885a9182fd22b05826ab2a9548f60" kindref="member">basic_json::is_number_float()</ref>), <ref refid="classbasic__json_1abcc7082bb9fa07704c659f6be7c41bc9" kindref="member">basic_json::is_discarded()</ref>, <ref refid="classbasic__json_1a7fa8bc506b1519193a7bbc09f8a0f095" kindref="member">basic_json::is_primitive()</ref>, and <ref refid="classbasic__json_1aded85ec1014821c21b8a47bc816a6917" kindref="member">basic_json::is_structured()</ref> rely on it.</para>
<para><simplesect kind="note"><para>There are three enumeration entries (number_integer, number_unsigned, and number_float), because the library distinguishes these three types for numbers: <ref refid="classbasic__json_1aebb9c6a13e947a86e2a13fbe6ebd77f4" kindref="member">basic_json::number_unsigned_t</ref> is used for unsigned integers, <ref refid="classbasic__json_1a8b702448867b892700c768db4208a670" kindref="member">basic_json::number_integer_t</ref> is used for signed integers, and <ref refid="classbasic__json_1a1fd24dfabbdd1dc35513c82244633ca4" kindref="member">basic_json::number_float_t</ref> is used for floating-point numbers or to approximate integers which do not fit in the limits of their respective type.</para>
</simplesect>
<simplesect kind="see"><para>see <ref refid="classbasic__json_1aee75ecbdc67fc5faa1228c949c59ff27" kindref="member">basic_json::basic_json(const value_t value_type)</ref> <ndash/> create a JSON <ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">value</ref> with the default <ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">value</ref> for a given type</para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="2856" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="2857" bodyend="2868"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04f" prot="public" static="no" strong="yes">
        <type></type>
        <name>input_format_t</name>
        <qualifiedname>detail::input_format_t</qualifiedname>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa466deec76ecdf5fca6d38571f6324d54" prot="public">
          <name>json</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04faaf9de350d652f0c9055ddab514bd23ea" prot="public">
          <name>cbor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fac40d516627022a54003ac2b74a82688a" prot="public">
          <name>msgpack</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa4537f20910e85437f6d07701864084e8" prot="public">
          <name>ubjson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa0b6879b186bfb2b1ec65d2460e4eccd4" prot="public">
          <name>bson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a0ab3b338d0eadc6890b72cccef0ea04fa42facb1448d9878ab35f152ae236e0b8" prot="public">
          <name>bjdata</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the supported input formats </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6103" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6103" bodyend="6103"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592" prot="public" static="no" strong="yes">
        <type></type>
        <name>cbor_tag_handler_t</name>
        <qualifiedname>detail::cbor_tag_handler_t</qualifiedname>
        <enumvalue id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592acb5e100e5a9a3e7f6d1fd97512215282" prot="public">
          <name>error</name>
          <briefdescription>
<para>throw a <ref refid="classdetail_1_1parse__error" kindref="compound">parse_error</ref> exception in case of a tag </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592a567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
<para>ignore tags </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a7c070b2bf3d61e3d8b8013f6fb18d592a8cd892b7b97ef9489ae4479d3f4ef0fc" prot="public">
          <name>store</name>
          <briefdescription>
<para>store tags as binary type </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>how to treat CBOR tags </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="9113" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="9114" bodyend="9118"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312ef" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>parse_event_t</name>
        <qualifiedname>detail::parse_event_t</qualifiedname>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efae73f17027cb0acbb537f29d0a6944b26" prot="public">
          <name>object_start</name>
          <briefdescription>
<para>the parser read <computeroutput>{</computeroutput> and started to process a JSON object </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efaf63e2a2468a37aa4f394fcc3bcb8249c" prot="public">
          <name>object_end</name>
          <briefdescription>
<para>the parser read <computeroutput>}</computeroutput> and finished processing a JSON object </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efaa4388a3d92419edbb1c6efd4d52461f3" prot="public">
          <name>array_start</name>
          <briefdescription>
<para>the parser read <computeroutput>[</computeroutput> and started to process a JSON array </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa49642fb732aa2e112188fba1f9d3ef7f" prot="public">
          <name>array_end</name>
          <briefdescription>
<para>the parser read <computeroutput>]</computeroutput> and finished processing a JSON array </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa3c6e0b8a9c15224a8228b9a98ca1531d" prot="public">
          <name>key</name>
          <briefdescription>
<para>the parser read a key of a value in an object </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" prot="public">
          <name>value</name>
          <briefdescription>
<para>the parser finished reading a JSON value </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="12132" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="12133" bodyend="12146"/>
      </memberdef>
      <memberdef kind="enum" id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298" prot="public" static="no" strong="yes">
        <type></type>
        <name>error_handler_t</name>
        <qualifiedname>detail::error_handler_t</qualifiedname>
        <enumvalue id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298a2133fd717402a7966ee88d06f9e0b792" prot="public">
          <name>strict</name>
          <briefdescription>
<para>throw a <ref refid="classdetail_1_1type__error" kindref="compound">type_error</ref> exception in case of invalid UTF-8 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298a9dde360102c103867bd2f45872f1129c" prot="public">
          <name>replace</name>
          <briefdescription>
<para>replace invalid UTF-8 sequences with U+FFFD </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedetail_1abe7cfa1fd8fa706ff4392bff9d1a8298a567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
<para>ignore invalid UTF-8 sequences </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>how to treat decoding errors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="17927" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="17928" bodyend="17932"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacedetail_1aa57deea1171ba56f5093e7d6acc154ee" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::type</type>
        <definition>using detail::void_t =  typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <qualifiedname>detail::void_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="253" column="12" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a49d7b031250e4de6b66d0f72771c2073" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1detector" kindref="compound">detector</ref>&lt; <ref refid="structdetail_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">::value_t</ref></type>
        <definition>using detail::is_detected =  typename detector&lt;nonesuch, void, Op, Args...&gt;::value_t</definition>
        <argsstring></argsstring>
        <name>is_detected</name>
        <qualifiedname>detail::is_detected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="292" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a0d2738c93c46d6a838ffe68933aabd95" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1detector" kindref="compound">detector</ref>&lt; <ref refid="structdetail_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;::type</type>
        <definition>using detail::detected_t =  typename detector&lt;nonesuch, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_t</name>
        <qualifiedname>detail::detected_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="298" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a12e693f0d72794475f84917b6a575957" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Default</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1detector" kindref="compound">detector</ref>&lt; Default, void, Op, Args... &gt;</type>
        <definition>using detail::detected_or =  detector&lt;Default, void, Op, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>detected_or</name>
        <qualifiedname>detail::detected_or</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="301" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a564d9f2b91fbca4ea8f38c107b7dda35" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Default</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="namespacedetail_1a12e693f0d72794475f84917b6a575957" kindref="member">detected_or</ref>&lt; Default, Op, Args... &gt;::type</type>
        <definition>using detail::detected_or_t =  typename detected_or&lt;Default, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_or_t</name>
        <qualifiedname>detail::detected_or_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="304" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a41e28f61731099e2ab777c3d001906dd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Expected</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; Expected, <ref refid="namespacedetail_1a0d2738c93c46d6a838ffe68933aabd95" kindref="member">detected_t</ref>&lt; Op, Args... &gt; &gt;</type>
        <definition>using detail::is_detected_exact =  std::is_same&lt;Expected, detected_t&lt;Op, Args...&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_exact</name>
        <qualifiedname>detail::is_detected_exact</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="307" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ad5b6d62bc83a4495e86e2814067c68d2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class To</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_convertible&lt; <ref refid="namespacedetail_1a0d2738c93c46d6a838ffe68933aabd95" kindref="member">detected_t</ref>&lt; Op, Args... &gt;, To &gt;</type>
        <definition>using detail::is_detected_convertible = 
    std::is_convertible&lt;detected_t&lt;Op, Args...&gt;, To&gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_convertible</name>
        <qualifiedname>detail::is_detected_convertible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="310" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ac6948661b53b8db87e284313fe7415be" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type</type>
        <definition>using detail::uncvref_t =  typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>uncvref_t</name>
        <qualifiedname>detail::uncvref_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3065" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using detail::enable_if_t =  typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <qualifiedname>detail::enable_if_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3079" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ad160d0b2947609fc1f7f4594b7cc3bf4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>Ints</declname>
            <defname>Ints</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1integer__sequence" kindref="compound">integer_sequence</ref>&lt; size_t, Ints... &gt;</type>
        <definition>using detail::index_sequence =  integer_sequence&lt;size_t, Ints...&gt;</definition>
        <argsstring></argsstring>
        <name>index_sequence</name>
        <qualifiedname>detail::index_sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3121" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a52358a91362a0af69044c0d9e0dd1599" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>T</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1utility__internal_1_1_gen" kindref="compound">utility_internal::Gen</ref>&lt; T, N &gt;::type</type>
        <definition>using detail::make_integer_sequence =  typename utility_internal::Gen&lt;T, N&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_integer_sequence</name>
        <qualifiedname>detail::make_integer_sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3167" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a030b306641c6a638c81056a354c0631b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a52358a91362a0af69044c0d9e0dd1599" kindref="member">make_integer_sequence</ref>&lt; size_t, N &gt;</type>
        <definition>using detail::make_index_sequence =  make_integer_sequence&lt;size_t, N&gt;</definition>
        <argsstring></argsstring>
        <name>make_index_sequence</name>
        <qualifiedname>detail::make_index_sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3175" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a85e0d82e94b78877f8dd69bea53e3716" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a030b306641c6a638c81056a354c0631b" kindref="member">make_index_sequence</ref>&lt; sizeof...(Ts)&gt;</type>
        <definition>using detail::index_sequence_for =  make_index_sequence&lt;sizeof...(Ts)&gt;</definition>
        <argsstring></argsstring>
        <name>index_sequence_for</name>
        <qualifiedname>detail::index_sequence_for</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3183" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aeb106546fae0b79987af7a1ae0c3694e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::mapped_type</type>
        <definition>using detail::mapped_type_t =  typename T::mapped_type</definition>
        <argsstring></argsstring>
        <name>mapped_type_t</name>
        <qualifiedname>detail::mapped_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3478" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae16bad596b69e14a8db0e0c4924a558b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::key_type</type>
        <definition>using detail::key_type_t =  typename T::key_type</definition>
        <argsstring></argsstring>
        <name>key_type_t</name>
        <qualifiedname>detail::key_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3481" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a2e47d793fa2685a15f6d2c75114b7759" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::value_type</type>
        <definition>using detail::value_type_t =  typename T::value_type</definition>
        <argsstring></argsstring>
        <name>value_type_t</name>
        <qualifiedname>detail::value_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3484" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a5e21adb880240c2593b35b721f56e6bd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::difference_type</type>
        <definition>using detail::difference_type_t =  typename T::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type_t</name>
        <qualifiedname>detail::difference_type_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3487" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a4d78f2ad7a097583f78ae9b4bf11fb04" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::pointer</type>
        <definition>using detail::pointer_t =  typename T::pointer</definition>
        <argsstring></argsstring>
        <name>pointer_t</name>
        <qualifiedname>detail::pointer_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3490" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae5ac19c7fb5b9a5d5300e506ba5161a7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::reference</type>
        <definition>using detail::reference_t =  typename T::reference</definition>
        <argsstring></argsstring>
        <name>reference_t</name>
        <qualifiedname>detail::reference_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3493" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ab0d70ce5cca0fd6d88b4906f33bdd876" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::iterator_category</type>
        <definition>using detail::iterator_category_t =  typename T::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category_t</name>
        <qualifiedname>detail::iterator_category_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3496" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a112db9fe8f8b91cb6439825ea9ddb6f9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(T::to_json(std::declval&lt; Args &gt;()...))</type>
        <definition>using detail::to_json_function =  decltype(T::to_json(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>to_json_function</name>
        <qualifiedname>detail::to_json_function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3499" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a91cadf3d0cff5a4200f7c3668250b360" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(T::from_json(std::declval&lt; Args &gt;()...))</type>
        <definition>using detail::from_json_function =  decltype(T::from_json(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>from_json_function</name>
        <qualifiedname>detail::from_json_function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3502" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1afad0060784c2bfd69c62e4fd434ebcb8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().template <ref refid="namespacedetail_1a7116703ea757fe9821bf2e903b91c160" kindref="member">get</ref>&lt; U &gt;())</type>
        <definition>using detail::get_template_function =  decltype(std::declval&lt;T&gt;().template get&lt;U&gt;())</definition>
        <argsstring></argsstring>
        <name>get_template_function</name>
        <qualifiedname>detail::get_template_function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3505" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1acb97099766181ceb53f2258bd5737c18" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::key_compare</type>
        <definition>using detail::detect_key_compare =  typename T::key_compare</definition>
        <argsstring></argsstring>
        <name>detect_key_compare</name>
        <qualifiedname>detail::detect_key_compare</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3562" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a76d4e72f99ceeee429601e9b7cc295d6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structdetail_1_1actual__object__comparator" kindref="compound">actual_object_comparator</ref>&lt; BasicJsonType &gt;::type</type>
        <definition>using detail::actual_object_comparator_t =  typename actual_object_comparator&lt;BasicJsonType&gt;::type</definition>
        <argsstring></argsstring>
        <name>actual_object_comparator_t</name>
        <qualifiedname>detail::actual_object_comparator_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3578" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ab0d3e4e28b7c6c98f622811a1cf5e218" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a469b9c0b78404c24509a221801bc4c26" kindref="member">enable_if_t</ref>&lt; <ref refid="structdetail_1_1is__range" kindref="compound">is_range</ref>&lt; R &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref>, result_of_begin&lt; decltype(std::declval&lt; R &amp; &gt;())&gt; &gt;</type>
        <definition>using detail::iterator_t =  enable_if_t&lt;is_range&lt;R&gt;::value, result_of_begin&lt;decltype(std::declval&lt;R&amp;&gt;())&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>iterator_t</name>
        <qualifiedname>detail::iterator_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3671" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a81c6c656243412df4c9b1641121c5388" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a2e47d793fa2685a15f6d2c75114b7759" kindref="member">value_type_t</ref>&lt; <ref refid="structdetail_1_1iterator__traits" kindref="compound">iterator_traits</ref>&lt; <ref refid="namespacedetail_1ab0d3e4e28b7c6c98f622811a1cf5e218" kindref="member">iterator_t</ref>&lt; T &gt; &gt; &gt;</type>
        <definition>using detail::range_value_t =  value_type_t&lt;iterator_traits&lt;iterator_t&lt;T&gt;&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>range_value_t</name>
        <qualifiedname>detail::range_value_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3674" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ad69b24f8cbed559288515173e466e90a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1is__specialization__of" kindref="compound">is_specialization_of</ref>&lt;::nlohmann::json_pointer, <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">uncvref_t</ref>&lt; T &gt; &gt;</type>
        <definition>using detail::is_json_pointer =  is_specialization_of&lt;::nlohmann::json_pointer, uncvref_t&lt;T&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>is_json_pointer</name>
        <qualifiedname>detail::is_json_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3900" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae6ce95fb0edf79e0d3beaf4de08dd2a4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::is_transparent</type>
        <definition>using detail::detect_is_transparent =  typename T::is_transparent</definition>
        <argsstring></argsstring>
        <name>detect_is_transparent</name>
        <qualifiedname>detail::detect_is_transparent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3913" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a4ae51f74b87e207cfffc3f081a47abe6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Comparator</type>
          </param>
          <param>
            <type>typename ObjectKeyType</type>
          </param>
          <param>
            <type>typename KeyTypeCVRef</type>
          </param>
          <param>
            <type>bool</type>
            <declname>RequireTransparentComparator</declname>
            <defname>RequireTransparentComparator</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>ExcludeObjectKeyType</declname>
            <defname>ExcludeObjectKeyType</defname>
            <defval>RequireTransparentComparator</defval>
          </param>
          <param>
            <type>typename KeyType</type>
            <defval>uncvref_t&lt;KeyTypeCVRef&gt;</defval>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; <ref refid="structdetail_1_1is__comparable" kindref="compound">is_comparable</ref>&lt; Comparator, ObjectKeyType, KeyTypeCVRef &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref> &amp;&amp;!(ExcludeObjectKeyType &amp;&amp;std::is_same&lt; KeyType, ObjectKeyType &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref>) &amp;&amp;(!RequireTransparentComparator||<ref refid="namespacedetail_1a49d7b031250e4de6b66d0f72771c2073" kindref="member">is_detected</ref>&lt; <ref refid="namespacedetail_1ae6ce95fb0edf79e0d3beaf4de08dd2a4" kindref="member">detect_is_transparent</ref>, Comparator &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref>) &amp;&amp;!<ref refid="namespacedetail_1ad69b24f8cbed559288515173e466e90a" kindref="member">is_json_pointer</ref>&lt; KeyType &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref>, std::true_type, std::false_type &gt;::type</type>
        <definition>using detail::is_usable_as_key_type =  typename std::conditional &lt;
                              is_comparable&lt;Comparator, ObjectKeyType, KeyTypeCVRef&gt;::value
                              &amp;&amp; !(ExcludeObjectKeyType &amp;&amp; std::is_same&lt;KeyType,
                                   ObjectKeyType&gt;::value)
                              &amp;&amp; (!RequireTransparentComparator
                                  || is_detected &lt;detect_is_transparent, Comparator&gt;::value)
                              &amp;&amp; !is_json_pointer&lt;KeyType&gt;::value,
                              std::true_type,
                              std::false_type &gt;::type</definition>
        <argsstring></argsstring>
        <name>is_usable_as_key_type</name>
        <qualifiedname>detail::is_usable_as_key_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3919" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1abfc52a572f16f6b2a222ca89db488775" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename KeyTypeCVRef</type>
          </param>
          <param>
            <type>bool</type>
            <declname>RequireTransparentComparator</declname>
            <defname>RequireTransparentComparator</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>ExcludeObjectKeyType</declname>
            <defname>ExcludeObjectKeyType</defname>
            <defval>RequireTransparentComparator</defval>
          </param>
          <param>
            <type>typename KeyType</type>
            <defval>uncvref_t&lt;KeyTypeCVRef&gt;</defval>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; <ref refid="namespacedetail_1a4ae51f74b87e207cfffc3f081a47abe6" kindref="member">is_usable_as_key_type</ref>&lt; typename BasicJsonType::object_comparator_t, typename BasicJsonType::object_t::key_type, KeyTypeCVRef, RequireTransparentComparator, ExcludeObjectKeyType &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref> &amp;&amp;!<ref refid="structdetail_1_1is__json__iterator__of" kindref="compound">is_json_iterator_of</ref>&lt; BasicJsonType, KeyType &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref>, std::true_type, std::false_type &gt;::type</type>
        <definition>using detail::is_usable_as_basic_json_key_type =  typename std::conditional &lt;
        is_usable_as_key_type&lt;typename BasicJsonType::object_comparator_t,
        typename BasicJsonType::object_t::key_type, KeyTypeCVRef,
        RequireTransparentComparator, ExcludeObjectKeyType&gt;::value
        &amp;&amp; !is_json_iterator_of&lt;BasicJsonType, KeyType&gt;::value,
        std::true_type,
        std::false_type &gt;::type</definition>
        <argsstring></argsstring>
        <name>is_usable_as_basic_json_key_type</name>
        <qualifiedname>detail::is_usable_as_basic_json_key_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3937" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a77ad9e0f8ab62a44321a418b395978c0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ObjectType</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; ObjectType &amp; &gt;().erase(std::declval&lt; KeyType &gt;()))</type>
        <definition>using detail::detect_erase_with_key_type =  decltype(std::declval&lt;ObjectType&amp;&gt;().erase(std::declval&lt;KeyType&gt;()))</definition>
        <argsstring></argsstring>
        <name>detect_erase_with_key_type</name>
        <qualifiedname>detail::detect_erase_with_key_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3946" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a76c6c4c14cb80b5010c659b8047e61d0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename KeyType</type>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; <ref refid="namespacedetail_1a49d7b031250e4de6b66d0f72771c2073" kindref="member">is_detected</ref>&lt; <ref refid="namespacedetail_1a77ad9e0f8ab62a44321a418b395978c0" kindref="member">detect_erase_with_key_type</ref>, typename BasicJsonType::object_t, KeyType &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref>, std::true_type, std::false_type &gt;::type</type>
        <definition>using detail::has_erase_with_key_type =  typename std::conditional &lt;
                                is_detected &lt;
                                detect_erase_with_key_type,
                                typename BasicJsonType::object_t, KeyType &gt;::value,
                                std::true_type,
                                std::false_type &gt;::type</definition>
        <argsstring></argsstring>
        <name>has_erase_with_key_type</name>
        <qualifiedname>detail::has_erase_with_key_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3950" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a53a6e700e53a804954457122fc7d85c1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_integral&lt; Types &gt;... &gt;</type>
        <definition>using detail::all_integral =  conjunction&lt;std::is_integral&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>all_integral</name>
        <qualifiedname>detail::all_integral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3989" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a9200c3b5ba459765992ae31d86e96a59" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_signed&lt; Types &gt;... &gt;</type>
        <definition>using detail::all_signed =  conjunction&lt;std::is_signed&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>all_signed</name>
        <qualifiedname>detail::all_signed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3992" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a60937971a697506b4ec015704fcfb508" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_unsigned&lt; Types &gt;... &gt;</type>
        <definition>using detail::all_unsigned =  conjunction&lt;std::is_unsigned&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>all_unsigned</name>
        <qualifiedname>detail::all_unsigned</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3995" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a49984f944c06b09376e2c711d6fc5173" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, <ref refid="namespacedetail_1a9200c3b5ba459765992ae31d86e96a59" kindref="member">all_signed</ref>&lt; Types... &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref>||<ref refid="namespacedetail_1a60937971a697506b4ec015704fcfb508" kindref="member">all_unsigned</ref>&lt; Types... &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref> &gt;</type>
        <definition>using detail::same_sign =  std::integral_constant &lt; bool,
      all_signed&lt;Types...&gt;::value || all_unsigned&lt;Types...&gt;::value &gt;</definition>
        <argsstring></argsstring>
        <name>same_sign</name>
        <qualifiedname>detail::same_sign</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3999" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a0a4184417c9202375552d1544402562e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename OfType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool,(std::is_signed&lt; OfType &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref> &amp;&amp;(sizeof(T)&lt; sizeof(OfType)))||(<ref refid="namespacedetail_1a49984f944c06b09376e2c711d6fc5173" kindref="member">same_sign</ref>&lt; OfType, T &gt;<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa2063c1608d6e0baf80249c42e2be5804" kindref="member">::value</ref> &amp;&amp;sizeof(OfType)==sizeof(T)) &gt;</type>
        <definition>using detail::never_out_of_range =  std::integral_constant &lt; bool,
      (std::is_signed&lt;OfType&gt;::value &amp;&amp; (sizeof(T) &lt; sizeof(OfType)))
      || (same_sign&lt;OfType, T&gt;::value &amp;&amp; sizeof(OfType) == sizeof(T)) &gt;</definition>
        <argsstring></argsstring>
        <name>never_out_of_range</name>
        <qualifiedname>detail::never_out_of_range</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4003" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ac24ae879accf9ac3062056996776fba5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Value</declname>
            <defname>Value</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, Value &gt;</type>
        <definition>using detail::bool_constant =  std::integral_constant&lt;bool, Value&gt;</definition>
        <argsstring></argsstring>
        <name>bool_constant</name>
        <qualifiedname>detail::bool_constant</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4084" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ab709c72c18ebf08cf737d376bae1c08b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1is__c__string" kindref="compound">is_c_string</ref>&lt; <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">uncvref_t</ref>&lt; T &gt; &gt;</type>
        <definition>using detail::is_c_string_uncvref =  is_c_string&lt;uncvref_t&lt;T&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>is_c_string_uncvref</name>
        <qualifiedname>detail::is_c_string_uncvref</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4112" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a05b119ff1ea0ae0f681804d9e1b1cded" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; Arg &amp;&amp; &gt;()))</type>
        <definition>using detail::string_can_append =  decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval &lt; Arg &amp;&amp; &gt; ()))</definition>
        <argsstring></argsstring>
        <name>string_can_append</name>
        <qualifiedname>detail::string_can_append</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4197" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a442ad834eebf92f987c6341be4dbc11d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a49d7b031250e4de6b66d0f72771c2073" kindref="member">is_detected</ref>&lt; <ref refid="namespacedetail_1a05b119ff1ea0ae0f681804d9e1b1cded" kindref="member">string_can_append</ref>, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append =  is_detected&lt;string_can_append, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append</name>
        <qualifiedname>detail::detect_string_can_append</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4200" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aeb185a7a4714d09d3ef88c98c41806c6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;()+=std::declval&lt; Arg &amp;&amp; &gt;())</type>
        <definition>using detail::string_can_append_op =  decltype(std::declval&lt;StringType&amp;&gt;() += std::declval &lt; Arg &amp;&amp; &gt; ())</definition>
        <argsstring></argsstring>
        <name>string_can_append_op</name>
        <qualifiedname>detail::string_can_append_op</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4203" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aea8bbfb59d064009e42c0e8372542412" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a49d7b031250e4de6b66d0f72771c2073" kindref="member">is_detected</ref>&lt; <ref refid="namespacedetail_1aeb185a7a4714d09d3ef88c98c41806c6" kindref="member">string_can_append_op</ref>, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append_op =  is_detected&lt;string_can_append_op, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append_op</name>
        <qualifiedname>detail::detect_string_can_append_op</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4206" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1adb1cfe420871df9332f830035da2dc4d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; const Arg &amp; &gt;().begin(), std::declval&lt; const Arg &amp; &gt;().end()))</type>
        <definition>using detail::string_can_append_iter =  decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const Arg&amp;&gt;().begin(), std::declval&lt;const Arg&amp;&gt;().end()))</definition>
        <argsstring></argsstring>
        <name>string_can_append_iter</name>
        <qualifiedname>detail::string_can_append_iter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4209" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a710d5c64fe525bbac2979540fa985fee" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a49d7b031250e4de6b66d0f72771c2073" kindref="member">is_detected</ref>&lt; <ref refid="namespacedetail_1adb1cfe420871df9332f830035da2dc4d" kindref="member">string_can_append_iter</ref>, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append_iter =  is_detected&lt;string_can_append_iter, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append_iter</name>
        <qualifiedname>detail::detect_string_can_append_iter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4212" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1ae0c1045292d211e30f9eb043ecf55d00" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; const Arg &amp; &gt;().data(), std::declval&lt; const Arg &amp; &gt;().size()))</type>
        <definition>using detail::string_can_append_data =  decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const Arg&amp;&gt;().data(), std::declval&lt;const Arg&amp;&gt;().size()))</definition>
        <argsstring></argsstring>
        <name>string_can_append_data</name>
        <qualifiedname>detail::string_can_append_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4215" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a225f5133a04a696c708ba3e668197cb5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a49d7b031250e4de6b66d0f72771c2073" kindref="member">is_detected</ref>&lt; <ref refid="namespacedetail_1ae0c1045292d211e30f9eb043ecf55d00" kindref="member">string_can_append_data</ref>, StringType, Arg &gt;</type>
        <definition>using detail::detect_string_can_append_data =  is_detected&lt;string_can_append_data, StringType, Arg&gt;</definition>
        <argsstring></argsstring>
        <name>detect_string_can_append_data</name>
        <qualifiedname>detail::detect_string_can_append_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4218" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a7a6cea300980654c629e71e56656236b" prot="public" static="no">
        <type>decltype(<ref refid="namespacedetail_1aada1510d1b55ad2faf4a71c70cffb374" kindref="member">input_adapter</ref>(std::declval&lt; const char * &gt;(), std::declval&lt; const char * &gt;()))</type>
        <definition>using detail::contiguous_bytes_input_adapter =  decltype(input_adapter(std::declval&lt;const char*&gt;(), std::declval&lt;const char*&gt;()))</definition>
        <argsstring></argsstring>
        <name>contiguous_bytes_input_adapter</name>
        <qualifiedname>detail::contiguous_bytes_input_adapter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6508" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a5b70509a3237fb6c17325fe13b60a432" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a37a6259cc0c1dae299a7866489dff0bd" kindref="member">null</ref>())</type>
        <definition>using detail::null_function_t =  decltype(std::declval&lt;T&amp;&gt;().null())</definition>
        <argsstring></argsstring>
        <name>null_function_t</name>
        <qualifiedname>detail::null_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8964" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a41a296d4ad71e52c418897482e25f7c1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a84e2c64f38f78ba3ea5c905ab5a2da27" kindref="member">boolean</ref>(std::declval&lt; bool &gt;()))</type>
        <definition>using detail::boolean_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().boolean(std::declval&lt;bool&gt;()))</definition>
        <argsstring></argsstring>
        <name>boolean_function_t</name>
        <qualifiedname>detail::boolean_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8967" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aa14a479ae64550ef493509b0fe7d0510" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Integer</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a5763da164f8659d94a56e29df64b4bcc" kindref="member">number_integer</ref>(std::declval&lt; Integer &gt;()))</type>
        <definition>using detail::number_integer_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().number_integer(std::declval&lt;Integer&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_integer_function_t</name>
        <qualifiedname>detail::number_integer_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8971" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1afb7322c45e118ef4ccd32b9dbe47d149" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Unsigned</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632adce7cc8ec29055c4158828921f2f265e" kindref="member">number_unsigned</ref>(std::declval&lt; Unsigned &gt;()))</type>
        <definition>using detail::number_unsigned_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().number_unsigned(std::declval&lt;Unsigned&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_unsigned_function_t</name>
        <qualifiedname>detail::number_unsigned_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8975" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a6e54c416496a8a7357fe3196a56d0138" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Float</type>
          </param>
          <param>
            <type>typename String</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632ad9966ecb59667235a57b4b999a649eef" kindref="member">number_float</ref>( std::declval&lt; Float &gt;(), std::declval&lt; const String &amp; &gt;()))</type>
        <definition>using detail::number_float_function_t =  decltype(std::declval&lt;T&amp;&gt;().number_float(
                                    std::declval&lt;Float&gt;(), std::declval&lt;const String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_float_function_t</name>
        <qualifiedname>detail::number_float_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8979" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1af88f47fa408322ba2ae25763dabc21ae" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename String</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">string</ref>(std::declval&lt; String &amp; &gt;()))</type>
        <definition>using detail::string_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().string(std::declval&lt;String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>string_function_t</name>
        <qualifiedname>detail::string_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8983" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a1a2c7ed535c65bf687c7e2fedc1e62c3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Binary</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632a9d7183f16acce70658f686ae7f1a4d20" kindref="member">binary</ref>(std::declval&lt; Binary &amp; &gt;()))</type>
        <definition>using detail::binary_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().binary(std::declval&lt;Binary&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>binary_function_t</name>
        <qualifiedname>detail::binary_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8987" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a6bee0ac3eb5112078e5cf4ac9492e9bd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().start_object(std::declval&lt; std::size_t &gt;()))</type>
        <definition>using detail::start_object_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().start_object(std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>start_object_function_t</name>
        <qualifiedname>detail::start_object_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8991" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a566da3d2466aee239ede8bb92ce7e1c7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename String</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312efa3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">key</ref>(std::declval&lt; String &amp; &gt;()))</type>
        <definition>using detail::key_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().key(std::declval&lt;String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>key_function_t</name>
        <qualifiedname>detail::key_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8995" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a254799216b1b66a082f3509de18e0ed7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().end_object())</type>
        <definition>using detail::end_object_function_t =  decltype(std::declval&lt;T&amp;&gt;().end_object())</definition>
        <argsstring></argsstring>
        <name>end_object_function_t</name>
        <qualifiedname>detail::end_object_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="8999" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="8999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a7078516eae61aec9d9a6c16d63cba1ae" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().start_array(std::declval&lt; std::size_t &gt;()))</type>
        <definition>using detail::start_array_function_t = 
    decltype(std::declval&lt;T&amp;&gt;().start_array(std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>start_array_function_t</name>
        <qualifiedname>detail::start_array_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="9002" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="9002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1adbbe723ac6b60fd3c11eef5c6ca82fe4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().end_array())</type>
        <definition>using detail::end_array_function_t =  decltype(std::declval&lt;T&amp;&gt;().end_array())</definition>
        <argsstring></argsstring>
        <name>end_array_function_t</name>
        <qualifiedname>detail::end_array_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="9006" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="9006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1aa75770185e99810c40de344d3bb10853" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Exception</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="classdetail_1_1parse__error" kindref="compound">parse_error</ref>( std::declval&lt; std::size_t &gt;(), std::declval&lt; const std::string &amp; &gt;(), std::declval&lt; const Exception &amp; &gt;()))</type>
        <definition>using detail::parse_error_function_t =  decltype(std::declval&lt;T&amp;&gt;().parse_error(
        std::declval&lt;std::size_t&gt;(), std::declval&lt;const std::string&amp;&gt;(),
        std::declval&lt;const Exception&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>parse_error_function_t</name>
        <qualifiedname>detail::parse_error_function_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="9009" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="9009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1affc9951a9c138c79d63e6f4702e37a1a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; bool(int, <ref refid="namespacedetail_1a47b1bb0bbd3596589ed9187059c312ef" kindref="member">parse_event_t</ref>, BasicJsonType &amp;)&gt;</type>
        <definition>using detail::parser_callback_t = 
    std::function&lt;bool(int , parse_event_t , BasicJsonType&amp; )&gt;</definition>
        <argsstring></argsstring>
        <name>parser_callback_t</name>
        <qualifiedname>detail::parser_callback_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="12149" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="12149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedetail_1a558c0470e929e42aad8be2527da6c033" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="structdetail_1_1output__adapter__protocol" kindref="compound">output_adapter_protocol</ref>&lt; CharType &gt; &gt;</type>
        <definition>using detail::output_adapter_t =  std::shared_ptr&lt;output_adapter_protocol&lt;CharType&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>output_adapter_t</name>
        <qualifiedname>detail::output_adapter_t</qualifiedname>
        <briefdescription>
<para>a type to simplify interfaces </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="14835" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="14835" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacedetail_1aac7ca91589afb0bad68baec5949daaa2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool detail::operator&lt;</definition>
        <argsstring>(const value_t lhs, const value_t rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>detail::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632" kindref="member">value_t</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison operator for JSON types </para>
        </briefdescription>
        <detaileddescription>
<para>Returns an ordering that is similar to Python:<itemizedlist>
<listitem><para>order: null &lt; boolean &lt; number &lt; object &lt; array &lt; string &lt; binary</para>
</listitem><listitem><para>furthermore, each type is not smaller than itself</para>
</listitem><listitem><para>discarded values are not comparable</para>
</listitem><listitem><para>binary is represented as a b&quot;&quot; string in python and directly comparable to a string; however, making a binary array directly comparable with a string would be surprising behavior in a JSON file.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="since"><para>version 1.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="2886" column="12" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="2886" bodyend="2907"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6fd295e53b1dd4f46e235e6afee26d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::replace_substring</definition>
        <argsstring>(StringType &amp;s, const StringType &amp;f, const StringType &amp;t)</argsstring>
        <name>replace_substring</name>
        <qualifiedname>detail::replace_substring</qualifiedname>
        <param>
          <type>StringType &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>replace all occurrences of a substring by another string </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to manipulate; changed so that all occurrences of <emphasis>f</emphasis> are replaced with <emphasis>t</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>the substring to replace with <emphasis>t</emphasis> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace <emphasis>f</emphasis> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The search string <emphasis>f</emphasis> must not be empty. <bold>This precondition is enforced with an assertion.</bold></para>
</simplesect>
<simplesect kind="since"><para>version 2.0.0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="2955" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="2955" bodyend="2964"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1af2a9ce4740e0b45d33129e2c8e53a0a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>StringType</type>
        <definition>StringType detail::escape</definition>
        <argsstring>(StringType s)</argsstring>
        <name>escape</name>
        <qualifiedname>detail::escape</qualifiedname>
        <param>
          <type>StringType</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>string escaping as described in RFC 6901 (Sect. 4) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to escape </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>escaped string</para>
</simplesect>
Note the order of escaping &quot;~&quot; to &quot;~0&quot; and &quot;/&quot; to &quot;~1&quot; is important. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="2974" column="19" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="2974" bodyend="2979"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0e971234e72db1e314aa87298e84d1d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void detail::unescape</definition>
        <argsstring>(StringType &amp;s)</argsstring>
        <name>unescape</name>
        <qualifiedname>detail::unescape</qualifiedname>
        <param>
          <type>StringType &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>string unescaping as described in RFC 6901 (Sect. 4) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to unescape </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unescaped string</para>
</simplesect>
Note the order of escaping &quot;~1&quot; to &quot;/&quot; and &quot;~0&quot; to &quot;~&quot; is important. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="2989" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="2989" bodyend="2993"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a346dced829a9a2b98a722a31c62b3f7a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, sizeof...(Args)&gt;</type>
        <definition>std::array&lt; T, sizeof...(Args)&gt; detail::make_array</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_array</name>
        <qualifiedname>detail::make_array</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3206" column="29" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3206" bodyend="3209"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5d17f1d261bd9fec64c08343c9f809fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>enable_if_t&lt; !std::is_same&lt; T, U &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T detail::conditional_static_cast</definition>
        <argsstring>(U value)</argsstring>
        <name>conditional_static_cast</name>
        <qualifiedname>detail::conditional_static_cast</qualifiedname>
        <param>
          <type>U</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="3977" column="3" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="3977" bodyend="3980"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a8e7a4119c6c8e86cef8f1c904c8bf040" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OfType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool detail::value_in_range_of</definition>
        <argsstring>(T val)</argsstring>
        <name>value_in_range_of</name>
        <qualifiedname>detail::value_in_range_of</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4078" column="23" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4078" bodyend="4081"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac185140ed8c8fcc07a302a890b714b0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>()</argsstring>
        <name>concat_length</name>
        <qualifiedname>detail::concat_length</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4162" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4162" bodyend="4165"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ad75b3627f88726414a2b68f2a548b3fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>(const char *cstr, Args &amp;&amp;... rest)</argsstring>
        <name>concat_length</name>
        <qualifiedname>detail::concat_length</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>cstr</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4180" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4180" bodyend="4184" declfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" declline="4168" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5b105368451255ece48996623868b7ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>(const StringType &amp;str, Args &amp;&amp;... rest)</argsstring>
        <name>concat_length</name>
        <qualifiedname>detail::concat_length</qualifiedname>
        <param>
          <type>const StringType &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4187" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4187" bodyend="4190" declfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" declline="4171" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a30e61448d1bb9796220345018a287906" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::concat_length</definition>
        <argsstring>(const char, Args &amp;&amp;... rest)</argsstring>
        <name>concat_length</name>
        <qualifiedname>detail::concat_length</qualifiedname>
        <param>
          <type>const char</type>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4174" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4174" bodyend="4177"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a89f967b745cf8df11ba9d59f93d97753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::concat_into</definition>
        <argsstring>(OutStringType &amp;)</argsstring>
        <name>concat_into</name>
        <qualifiedname>detail::concat_into</qualifiedname>
        <param>
          <type>OutStringType &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4193" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4193" bodyend="4194"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa16fc2d4a149a0e3ac68ceb98b153815" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>enable_if_t&lt; !detect_string_can_append&lt; OutStringType, Arg &gt;::value &amp;&amp;detect_string_can_append_op&lt; OutStringType, Arg &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::concat_into</definition>
        <argsstring>(OutStringType &amp;out, Arg &amp;&amp;arg, Args &amp;&amp;... rest)</argsstring>
        <name>concat_into</name>
        <qualifiedname>detail::concat_into</qualifiedname>
        <param>
          <type>OutStringType &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Arg &amp;&amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4240" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4240" bodyend="4244" declfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" declline="4223" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a78434fad7c03e66afdd06a6df628315a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>enable_if_t&lt; !detect_string_can_append&lt; OutStringType, Arg &gt;::value &amp;&amp;!detect_string_can_append_op&lt; OutStringType, Arg &gt;::value &amp;&amp;detect_string_can_append_iter&lt; OutStringType, Arg &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::concat_into</definition>
        <argsstring>(OutStringType &amp;out, const Arg &amp;arg, Args &amp;&amp;... rest)</argsstring>
        <name>concat_into</name>
        <qualifiedname>detail::concat_into</qualifiedname>
        <param>
          <type>OutStringType &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Arg &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4259" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4259" bodyend="4263" declfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" declline="4229" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a266fb3d4bf633ad6c506434cc91164da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutStringType</type>
            <defval>std::string</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>OutStringType</type>
        <definition>OutStringType detail::concat</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>concat</name>
        <qualifiedname>detail::concat</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4277" column="22" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4277" bodyend="4283"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac8fc7fc4703cbd8edd7bb43a94adf92b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename std::nullptr_t &amp;n)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename std::nullptr_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4593" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4593" bodyend="4600"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ad10dc6af43ec8e72954eb2ac08c8698b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::get_arithmetic_value</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>get_arithmetic_value</name>
        <qualifiedname>detail::get_arithmetic_value</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4607" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4607" bodyend="4637"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ae1f62aac7ce53a789f545f54e41e8926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::boolean_t &amp;b)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::boolean_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4640" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4640" bodyend="4647"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0b01c920706dca5df2940f1f09728db3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;s)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4650" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4650" bodyend="4657"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa0e2a2cdcf751b91b3fd1384add531cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename StringType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; StringType &amp;, const typename BasicJsonType::string_t &gt;::value &amp;&amp;is_detected_exact&lt; typename BasicJsonType::string_t::value_type, value_type_t, StringType &gt;::value &amp;&amp;!std::is_same&lt; typename BasicJsonType::string_t, StringType &gt;::value &amp;&amp;!is_json_ref&lt; StringType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, StringType &amp;s)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>StringType &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4666" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4666" bodyend="4674"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4c4e5abfc7ef24404781b5d8662891c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_float_t &amp;val)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_float_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4677" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4677" bodyend="4680"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6b5ceb7afc9a944042efac660c052db8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_unsigned_t &amp;val)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_unsigned_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4683" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4683" bodyend="4686"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a8c225a3450f5d8a42cded36558ce54bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_integer_t &amp;val)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_integer_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4689" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4689" bodyend="4692"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0ee80fe4260faeb92fe847620f7a2712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, EnumType &amp;e)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4697" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4697" bodyend="4702"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a906affddceb2daa6a462c5c02ce53761" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_getable&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::forward_list&lt; T, Allocator &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::forward_list&lt; T, Allocator &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4708" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4708" bodyend="4720"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a1dee67b2f27eb606b7174ff7e7e56c49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_getable&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::valarray&lt; T &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::valarray&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4725" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4725" bodyend="4737"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4bb5bc21b8c5883207595a235a21946d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>decltype(j.template <ref refid="namespacedetail_1a7116703ea757fe9821bf2e903b91c160" kindref="member">get</ref>&lt; T &gt;(), void())</type>
        <definition>decltype(j.template get&lt; T &gt;(), void()) detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, T(&amp;arr)[N])</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4740" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4740" bodyend="4747"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a51663047160f45866b183b4f0868adb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;arr, priority_tag&lt; 3 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <qualifiedname>detail::from_json_array_impl</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4750" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4750" bodyend="4753"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ade9eb9a3516110d8886a4f3dcbe35006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>decltype(j.template <ref refid="namespacedetail_1a7116703ea757fe9821bf2e903b91c160" kindref="member">get</ref>&lt; T &gt;(), void())</type>
        <definition>decltype(j.template get&lt; T &gt;(), void()) detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, std::array&lt; T, N &gt; &amp;arr, priority_tag&lt; 2 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <qualifiedname>detail::from_json_array_impl</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::array&lt; T, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4756" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4756" bodyend="4764"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ab722e171d99403f14337366b5e0d3620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; ConstructibleArrayType &amp;, ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(arr.reserve(std::declval&lt; typename ConstructibleArrayType::size_type &gt;()), j.template <ref refid="namespacedetail_1a7116703ea757fe9821bf2e903b91c160" kindref="member">get</ref>&lt; typename ConstructibleArrayType::value_type &gt;(), void())</type>
        <definition>decltype(arr.reserve(std::declval&lt; typename ConstructibleArrayType::size_type &gt;()), j.template get&lt; typename ConstructibleArrayType::value_type &gt;(), void()) detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr, priority_tag&lt; 1 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <qualifiedname>detail::from_json_array_impl</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4770" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4770" bodyend="4788"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ae352d45d92aee512f9e16a808da911f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; ConstructibleArrayType &amp;, ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr, priority_tag&lt; 0 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <qualifiedname>detail::from_json_array_impl</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4794" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4794" bodyend="4809"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ab475ad0d6acda4c96911fa6284a9ee37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_constructible_array_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!is_constructible_object_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!is_constructible_string_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::binary_t &gt;::value &amp;&amp;!is_basic_json&lt; ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="namespacedetail_1a51663047160f45866b183b4f0868adb5" kindref="member">from_json_array_impl</ref>(j, arr, <ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt; {}), j.template <ref refid="namespacedetail_1a7116703ea757fe9821bf2e903b91c160" kindref="member">get</ref>&lt; typename ConstructibleArrayType::value_type &gt;(), void())</type>
        <definition>decltype(from_json_array_impl(j, arr, priority_tag&lt; 3 &gt; {}), j.template get&lt; typename ConstructibleArrayType::value_type &gt;(), void()) detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4819" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4819" bodyend="4830"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a9692f52f83320f035160fcbc1137cf5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, sizeof...(Idx)&gt;</type>
        <definition>std::array&lt; T, sizeof...(Idx)&gt; detail::from_json_inplace_array_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::array&lt; T, sizeof...(Idx)&gt; &gt;, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>from_json_inplace_array_impl</name>
        <qualifiedname>detail::from_json_inplace_array_impl</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::array&lt; T, sizeof...(Idx)&gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="namespacedetail_1ad160d0b2947609fc1f7f4594b7cc3bf4" kindref="member">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4833" column="12" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4833" bodyend="4837"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a99cf03d4deaeea599f921f5d23baf0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="namespacedetail_1a9692f52f83320f035160fcbc1137cf5d" kindref="member">from_json_inplace_array_impl</ref>(std::forward&lt; BasicJsonType &gt;(j), tag, <ref refid="namespacedetail_1a030b306641c6a638c81056a354c0631b" kindref="member">make_index_sequence</ref>&lt; N &gt; {}))</type>
        <definition>decltype(from_json_inplace_array_impl(std::forward&lt; BasicJsonType &gt;(j), tag, make_index_sequence&lt; N &gt; {})) detail::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::array&lt; T, N &gt; &gt; tag)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::array&lt; T, N &gt; &gt;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4840" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4840" bodyend="4849"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0ad294bce6911925bbb3afaaf5cafb50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::binary_t &amp;bin)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::binary_t &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4852" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4852" bodyend="4860"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a65752fffa784667e7b4ea8bdd0ec6669" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_constructible_object_type&lt; BasicJsonType, ConstructibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleObjectType &amp;obj)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4864" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4864" bodyend="4882"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5679c0faebc99f95ebfd2cb33406cdfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_unsigned_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_integer_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_float_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4896" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4896" bodyend="4930"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1adbf505efec69433a3894afeeed33aa81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt; Args... &gt; detail::from_json_tuple_impl_base</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>from_json_tuple_impl_base</name>
        <qualifiedname>detail::from_json_tuple_impl_base</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1ad160d0b2947609fc1f7f4594b7cc3bf4" kindref="member">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4933" column="12" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4933" bodyend="4936"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4d7ca96cdafaf1ceb4293f1b820c8fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>class A1</type>
          </param>
          <param>
            <type>class A2</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; A1, A2 &gt;</type>
        <definition>std::pair&lt; A1, A2 &gt; detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::pair&lt; A1, A2 &gt; &gt;, priority_tag&lt; 0 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <qualifiedname>detail::from_json_tuple_impl</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::pair&lt; A1, A2 &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4939" column="11" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4939" bodyend="4943"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ac4311ef7d1e7089ef3404d6f50964cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename A1</type>
          </param>
          <param>
            <type>typename A2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, std::pair&lt; A1, A2 &gt; &amp;p, priority_tag&lt; 1 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <qualifiedname>detail::from_json_tuple_impl</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::pair&lt; A1, A2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4946" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4946" bodyend="4949"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a46a1b9ef058e1117c154d751abf93400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt; Args... &gt; detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::tuple&lt; Args... &gt; &gt;, priority_tag&lt; 2 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <qualifiedname>detail::from_json_tuple_impl</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::tuple&lt; Args... &gt; &gt;</type>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4952" column="12" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4952" bodyend="4955"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a77cca410ac9e251e0ff2847df09e03d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, std::tuple&lt; Args... &gt; &amp;t, priority_tag&lt; 3 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <qualifiedname>detail::from_json_tuple_impl</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4958" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4958" bodyend="4961"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a63e4fca7dfdd8e637a6859155b5054b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename TupleRelated</type>
          </param>
        </templateparamlist>
        <type>decltype(<ref refid="namespacedetail_1a4d7ca96cdafaf1ceb4293f1b820c8fe0" kindref="member">from_json_tuple_impl</ref>(std::forward&lt; BasicJsonType &gt;(j), std::forward&lt; TupleRelated &gt;(t), <ref refid="structdetail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt; {}))</type>
        <definition>decltype(from_json_tuple_impl(std::forward&lt; BasicJsonType &gt;(j), std::forward&lt; TupleRelated &gt;(t), priority_tag&lt; 3 &gt; {})) detail::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, TupleRelated &amp;&amp;t)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>TupleRelated &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4964" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4964" bodyend="4973"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa1a92ab7f5de728919535b5714a4eda6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t &lt; !std::is_constructible &lt;                                        typename BasicJsonType::string_t, Key &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::map&lt; Key, Value, Compare, Allocator &gt; &amp;m)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::map&lt; Key, Value, Compare, Allocator &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4978" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4978" bodyend="4993"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a6b60b3f3a22e35323af3ecbb1d7e2464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename Hash</type>
          </param>
          <param>
            <type>typename KeyEqual</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t &lt; !std::is_constructible &lt;                                        typename BasicJsonType::string_t, Key &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::unordered_map&lt; Key, Value, Hash, KeyEqual, Allocator &gt; &amp;m)</argsstring>
        <name>from_json</name>
        <qualifiedname>detail::from_json</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; Key, Value, Hash, KeyEqual, Allocator &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="4998" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="4998" bodyend="5013"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1af75fd8de21cdb8a0ed835b94aa02e5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename string_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::int_to_string</definition>
        <argsstring>(string_type &amp;target, std::size_t value)</argsstring>
        <name>int_to_string</name>
        <qualifiedname>detail::int_to_string</qualifiedname>
        <param>
          <type>string_type &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5108" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5108" bodyend="5113"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a7116703ea757fe9821bf2e903b91c160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename IteratorType</type>
          </param>
          <param>
            <type>enable_if_t&lt; N==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>decltype(i.key())</type>
        <definition>decltype(i.key()) detail::get</definition>
        <argsstring>(const nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &amp;i)</argsstring>
        <name>get</name>
        <qualifiedname>detail::get</qualifiedname>
        <param>
          <type>const nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5271" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5271" bodyend="5274"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1acfdf2e4c8f09d5acaa2841358db51f82" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_same&lt; T, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, T b) noexcept</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5571" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5571" bodyend="5574"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a432a72eacdbf2e603aadbef62b0693e5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename BoolRef</type>
          </param>
          <param>
            <type>enable_if_t&lt;((std::is_same&lt; std::vector&lt; bool &gt;::reference, BoolRef &gt;::value &amp;&amp;!std::is_same&lt; std::vector&lt; bool &gt;::reference, typename BasicJsonType::boolean_t &amp; &gt;::value)||(std::is_same&lt; std::vector&lt; bool &gt;::const_reference, BoolRef &gt;::value &amp;&amp;!std::is_same&lt; <ref refid="namespacedetail_1ac6948661b53b8db87e284313fe7415be" kindref="member">detail::uncvref_t</ref>&lt; std::vector&lt; bool &gt;::const_reference &gt;, typename BasicJsonType::boolean_t &gt;::value)) &amp;&amp;std::is_convertible&lt; const BoolRef &amp;, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const BoolRef &amp;b) noexcept</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const BoolRef &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5584" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5584" bodyend="5587"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a5c8440d5ee74cd66effc302294a0f03a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleString</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_constructible&lt; typename BasicJsonType::string_t, CompatibleString &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleString &amp;s)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5591" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5591" bodyend="5594"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a4efa05c0a1af490d3cd2244ab1ec2935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;&amp;s)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;&amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5597" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5597" bodyend="5600"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0fd79e26a03ad0f6f014acde6ca955ab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename FloatType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_floating_point&lt; FloatType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, FloatType val) noexcept</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5604" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5604" bodyend="5607"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1af4eec865929224a2edcdd86e0e2f5381" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberUnsignedType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberUnsignedType val) noexcept</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberUnsignedType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5611" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5611" bodyend="5614"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aca950b6f8e111cbf473fa0a30b4118a9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberIntegerType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberIntegerType val) noexcept</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberIntegerType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5618" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5618" bodyend="5621"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0aa73b51ab32301503f808871a7d1130" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, EnumType e) noexcept</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5626" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5626" bodyend="5630"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a898665fe3505e4124ee130ac40b5f7c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::vector&lt; bool &gt; &amp;e)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5634" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5634" bodyend="5637"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a13eaa461d3df66f08b281ed8ef67443d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_array_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!is_compatible_object_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!is_compatible_string_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; typename BasicJsonType::binary_t, CompatibleArrayType &gt;::value &amp;&amp;!is_basic_json&lt; CompatibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleArrayType &amp;arr)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5647" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5647" bodyend="5650"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aac4c34558512e0288775fefb01900d24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const typename BasicJsonType::binary_t &amp;bin)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const typename BasicJsonType::binary_t &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5653" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5653" bodyend="5656"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a71164c6a1be656ae46c8a48a9f4f024f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_convertible&lt; T, BasicJsonType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::valarray&lt; T &gt; &amp;arr)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::valarray&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5660" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5660" bodyend="5663"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aee383505e04bd7c68d4a288870147ff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;&amp;arr)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;&amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5666" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5666" bodyend="5669"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a210ddcd90b4d42832abc02eb516c4d99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_object_type&lt; BasicJsonType, CompatibleObjectType &gt;::value &amp;&amp;!is_basic_json&lt; CompatibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleObjectType &amp;obj)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5673" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5673" bodyend="5676"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a48b6774b5ab06f17f77c683d85f0b0b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::object_t &amp;&amp;obj)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::object_t &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5679" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5679" bodyend="5682"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a120fee99373c660eb270811fd26226c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>enable_if_t&lt; !std::is_constructible&lt; typename BasicJsonType::string_t, const T(&amp;)[N]&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const T(&amp;arr)[N])</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5689" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5689" bodyend="5692"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1ade7a3840a7af072111b938aafefa4bef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_constructible&lt; BasicJsonType, T1 &gt;::value &amp;&amp;std::is_constructible&lt; BasicJsonType, T2 &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::pair&lt; T1, T2 &gt; &amp;p)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::pair&lt; T1, T2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5695" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5695" bodyend="5698"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a3f5949a32eedf94fb0b98fd189fda0d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_same&lt; T, iteration_proxy_value&lt; typename BasicJsonType::iterator &gt; &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const T &amp;b)</argsstring>
        <name>to_json</name>
        <qualifiedname>detail::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5703" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5703" bodyend="5706"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a0d4851287a8b8b21ca8605d31ca446ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::to_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;j, const Tuple &amp;t, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>to_json_tuple_impl</name>
        <qualifiedname>detail::to_json_tuple_impl</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespacedetail_1ad160d0b2947609fc1f7f4594b7cc3bf4" kindref="member">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5709" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5709" bodyend="5712"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa723590713a6396b0306897a2cadfb08" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t detail::combine</definition>
        <argsstring>(std::size_t seed, std::size_t h) noexcept</argsstring>
        <name>combine</name>
        <qualifiedname>detail::combine</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5933" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5933" bodyend="5937"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a9dd43d16a6a490b032ceaca358755a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t detail::hash</definition>
        <argsstring>(const BasicJsonType &amp;j)</argsstring>
        <name>hash</name>
        <qualifiedname>detail::hash</qualifiedname>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>hash a JSON value </para>
        </briefdescription>
        <detaileddescription>
<para>The hash function tries to rely on std::hash where possible. Furthermore, the type of the JSON value is taken into account to have different hash values for null, 0, 0U, and false, etc.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classbasic__json" kindref="compound">basic_json</ref> specialization </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to hash </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash value of j </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5951" column="13" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5951" bodyend="6036"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aada1510d1b55ad2faf4a71c70cffb374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1iterator__input__adapter__factory" kindref="compound">iterator_input_adapter_factory</ref>&lt; IteratorType &gt;::adapter_type</type>
        <definition>iterator_input_adapter_factory&lt; IteratorType &gt;::adapter_type detail::input_adapter</definition>
        <argsstring>(IteratorType first, IteratorType last)</argsstring>
        <name>input_adapter</name>
        <qualifiedname>detail::input_adapter</qualifiedname>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6451" column="56" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6451" bodyend="6455"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a05aea72cf760e0ea9d49bce2ff8a63eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContainerType</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdetail_1_1container__input__adapter__factory__impl_1_1container__input__adapter__factory" kindref="compound">container_input_adapter_factory_impl::container_input_adapter_factory</ref>&lt; ContainerType &gt;::adapter_type</type>
        <definition>container_input_adapter_factory_impl::container_input_adapter_factory&lt; ContainerType &gt;::adapter_type detail::input_adapter</definition>
        <argsstring>(const ContainerType &amp;container)</argsstring>
        <name>input_adapter</name>
        <qualifiedname>detail::input_adapter</qualifiedname>
        <param>
          <type>const ContainerType &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6485" column="95" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6485" bodyend="6488"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1aa7b34bd54868366a47c9adad778867bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1file__input__adapter" kindref="compound">file_input_adapter</ref></type>
        <definition>file_input_adapter detail::input_adapter</definition>
        <argsstring>(std::FILE *file)</argsstring>
        <name>input_adapter</name>
        <qualifiedname>detail::input_adapter</qualifiedname>
        <param>
          <type>std::FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6492" column="27" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6492" bodyend="6495"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1acb4166ff849c629ef37849b96fd8b72e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1input__stream__adapter" kindref="compound">input_stream_adapter</ref></type>
        <definition>input_stream_adapter detail::input_adapter</definition>
        <argsstring>(std::istream &amp;stream)</argsstring>
        <name>input_adapter</name>
        <qualifiedname>detail::input_adapter</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6497" column="29" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6497" bodyend="6500"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a2e2919023b93a7f354cf35d46a493282" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdetail_1_1input__stream__adapter" kindref="compound">input_stream_adapter</ref></type>
        <definition>input_stream_adapter detail::input_adapter</definition>
        <argsstring>(std::istream &amp;&amp;stream)</argsstring>
        <name>input_adapter</name>
        <qualifiedname>detail::input_adapter</qualifiedname>
        <param>
          <type>std::istream &amp;&amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6502" column="29" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6502" bodyend="6505"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a53fa6fb154a643a2202e31cb18f47c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; CharT &gt;::value &amp;&amp;!std::is_array&lt; CharT &gt;::value &amp;&amp;std::is_integral&lt; typename std::remove_pointer&lt; CharT &gt;::type &gt;::value &amp;&amp;sizeof(typename std::remove_pointer&lt; CharT &gt;::type)==1, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedetail_1a7a6cea300980654c629e71e56656236b" kindref="member">contiguous_bytes_input_adapter</ref></type>
        <definition>contiguous_bytes_input_adapter detail::input_adapter</definition>
        <argsstring>(CharT b)</argsstring>
        <name>input_adapter</name>
        <qualifiedname>detail::input_adapter</qualifiedname>
        <param>
          <type>CharT</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6518" column="32" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6518" bodyend="6523"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a15bd0aaa9bdb9a169ef1601f9f9613e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>decltype(input_adapter(<ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632af1f713c9e000f5d3f280adbd124df4f5" kindref="member">array</ref>, <ref refid="namespacedetail_1a917c3efabea8a20dc72d9ae2c673d632af1f713c9e000f5d3f280adbd124df4f5" kindref="member">array</ref>+N))</type>
        <definition>decltype(input_adapter(array, array+N)) detail::input_adapter</definition>
        <argsstring>(T(&amp;array)[N])</argsstring>
        <name>input_adapter</name>
        <qualifiedname>detail::input_adapter</qualifiedname>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="6526" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="6526" bodyend="6529"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a9a6920228c2b39db99481d6952ca1add" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool detail::little_endianness</definition>
        <argsstring>(int num=1) noexcept</argsstring>
        <name>little_endianness</name>
        <qualifiedname>detail::little_endianness</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>determine system byte order </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if and only if system&apos;s byte order is little endian</para>
</simplesect>
<simplesect kind="note"><para>from <ulink url="https://stackoverflow.com/a/1001328/266378">https://stackoverflow.com/a/1001328/266378</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="9127" column="20" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="9127" bodyend="9130"/>
      </memberdef>
      <memberdef kind="function" id="namespacedetail_1a3f0588f1a546b169113e6e1e293168f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type><ref refid="json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" kindref="member">JSON_HEDLEY_RETURNS_NON_NULL</ref> char *</type>
        <definition>JSON_HEDLEY_RETURNS_NON_NULL char * detail::to_chars</definition>
        <argsstring>(char *first, const char *last, FloatType value)</argsstring>
        <name>to_chars</name>
        <qualifiedname>detail::to_chars</qualifiedname>
        <param>
          <type>char *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>last</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>generates a decimal representation of the floating-point number value in [first, last). </para>
        </briefdescription>
        <detaileddescription>
<para>The format of the resulting decimal representation is similar to printf&apos;s g format. Returns an iterator pointing past-the-end of the decimal representation.</para>
<para><simplesect kind="note"><para>The input number must be finite, i.e. NaN&apos;s and Inf&apos;s are not supported. </para>
</simplesect>
<simplesect kind="note"><para>The buffer must be large enough. </para>
</simplesect>
<simplesect kind="note"><para>The result is NOT null-terminated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="17848" column="6" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="17848" bodyend="17898"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>detail namespace with internal helper functions </para>
    </briefdescription>
    <detaileddescription>
<para>This namespace collects functions that should not be exposed, implementations of some <ref refid="classbasic__json" kindref="compound">basic_json</ref> methods, and meta-programming helpers.</para>
<para><simplesect kind="since"><para>version 2.1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="246" column="1"/>
  </compounddef>
</doxygen>
