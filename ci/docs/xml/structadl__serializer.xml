<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="structadl__serializer" kind="struct" language="C++" prot="public">
    <compoundname>adl_serializer</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ValueType</type>
      </param>
      <param>
        <type>typename</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structadl__serializer_1a5645c63fe43bd9b4ebc9917f9c99d0fd" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), val))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename TargetType</type>
            <defval>ValueType</defval>
          </param>
        </templateparamlist>
        <type>decltype(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), val), void())</type>
        <definition>static decltype(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), val), void()) adl_serializer&lt; ValueType, typename &gt;::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, TargetType &amp;val)</argsstring>
        <name>from_json</name>
        <qualifiedname>adl_serializer::from_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>TargetType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>convert a JSON value to any value type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/adl_serializer/from_json/">https://json.nlohmann.me/api/adl_serializer/from_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5766" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5766" bodyend="5771"/>
      </memberdef>
      <memberdef kind="function" id="structadl__serializer_1a1e06f0bcb63296fc306dbe4162a0f2a3" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), detail::identity_tag&lt; TargetType &gt; {}))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename TargetType</type>
            <defval>ValueType</defval>
          </param>
        </templateparamlist>
        <type>decltype(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), <ref refid="structdetail_1_1identity__tag" kindref="compound">detail::identity_tag</ref>&lt; TargetType &gt; {}))</type>
        <definition>static decltype(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), detail::identity_tag&lt; TargetType &gt; {})) adl_serializer&lt; ValueType, typename &gt;::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j)</argsstring>
        <name>from_json</name>
        <qualifiedname>adl_serializer::from_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>convert a JSON value to any value type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/adl_serializer/from_json/">https://json.nlohmann.me/api/adl_serializer/from_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5776" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5776" bodyend="5781"/>
      </memberdef>
      <memberdef kind="function" id="structadl__serializer_1a0216149429fe899cf45cbf14e08e2166" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" noexceptexpression="noexcept(::nlohmann::to_json(j, std::forward&lt; TargetType &gt;(val)))" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename TargetType</type>
            <defval>ValueType</defval>
          </param>
        </templateparamlist>
        <type>decltype(::nlohmann::to_json(j, std::forward&lt; TargetType &gt;(val)), void())</type>
        <definition>static decltype(::nlohmann::to_json(j, std::forward&lt; TargetType &gt;(val)), void()) adl_serializer&lt; ValueType, typename &gt;::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, TargetType &amp;&amp;val)</argsstring>
        <name>to_json</name>
        <qualifiedname>adl_serializer::to_json</qualifiedname>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>TargetType &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>convert any value type to a JSON value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/adl_serializer/to_json/">https://json.nlohmann.me/api/adl_serializer/to_json/</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5786" column="17" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5786" bodyend="5791"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>namespace for Niels Lohmann </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://github.com/nlohmann">https://github.com/nlohmann</ulink> </para>
</simplesect>
<simplesect kind="since"><para>version 1.0.0</para>
</simplesect>
default JSONSerializer template argument</para>
<para>This serializer ignores the template arguments and uses ADL (<ulink url="https://en.cppreference.com/w/cpp/language/adl">argument-dependent lookup</ulink>) for serialization.</para>
<para><simplesect kind="see"><para><ulink url="https://json.nlohmann.me/api/adl_serializer/">https://json.nlohmann.me/api/adl_serializer/</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" line="5761" column="1" bodyfile="D:/csad2425KI405KachurNazar11/src/client/packages/nlohmann.json.3.11.2/build/native/include/nlohmann/json.hpp" bodystart="5762" bodyend="5792"/>
    <listofallmembers>
      <member refid="structadl__serializer_1a5645c63fe43bd9b4ebc9917f9c99d0fd" prot="public" virt="non-virtual"><scope>adl_serializer</scope><name>from_json</name></member>
      <member refid="structadl__serializer_1a1e06f0bcb63296fc306dbe4162a0f2a3" prot="public" virt="non-virtual"><scope>adl_serializer</scope><name>from_json</name></member>
      <member refid="structadl__serializer_1a0216149429fe899cf45cbf14e08e2166" prot="public" virt="non-virtual"><scope>adl_serializer</scope><name>to_json</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
